//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCG.SINOStock.WCFService.SINOStockService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LoginDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginPwdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Role RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckCode {
            get {
                return this.CheckCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckCodeField, value) != true)) {
                    this.CheckCodeField = value;
                    this.RaisePropertyChanged("CheckCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LoginDt {
            get {
                return this.LoginDtField;
            }
            set {
                if ((this.LoginDtField.Equals(value) != true)) {
                    this.LoginDtField = value;
                    this.RaisePropertyChanged("LoginDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginNumber {
            get {
                return this.LoginNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginNumberField, value) != true)) {
                    this.LoginNumberField = value;
                    this.RaisePropertyChanged("LoginNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginPwd {
            get {
                return this.LoginPwdField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginPwdField, value) != true)) {
                    this.LoginPwdField = value;
                    this.RaisePropertyChanged("LoginPwd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDt {
            get {
                return this.ModifyDtField;
            }
            set {
                if ((this.ModifyDtField.Equals(value) != true)) {
                    this.ModifyDtField = value;
                    this.RaisePropertyChanged("ModifyDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Role Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Role : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Account[] AccountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleMainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RuleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Account[] Accounts {
            get {
                return this.AccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountsField, value) != true)) {
                    this.AccountsField = value;
                    this.RaisePropertyChanged("Accounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDt {
            get {
                return this.ModifyDtField;
            }
            set {
                if ((this.ModifyDtField.Equals(value) != true)) {
                    this.ModifyDtField = value;
                    this.RaisePropertyChanged("ModifyDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetail {
            get {
                return this.RoleDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailField, value) != true)) {
                    this.RoleDetailField = value;
                    this.RaisePropertyChanged("RoleDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleMain {
            get {
                return this.RoleMainField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleMainField, value) != true)) {
                    this.RoleMainField = value;
                    this.RaisePropertyChanged("RoleMain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RuleName {
            get {
                return this.RuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RuleNameField, value) != true)) {
                    this.RuleNameField = value;
                    this.RaisePropertyChanged("RuleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FormWork", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class FormWork : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BoxPCSQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BoxQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDKeyWordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QieShuField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowQtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BoxPCSQty {
            get {
                return this.BoxPCSQtyField;
            }
            set {
                if ((this.BoxPCSQtyField.Equals(value) != true)) {
                    this.BoxPCSQtyField = value;
                    this.RaisePropertyChanged("BoxPCSQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BoxQty {
            get {
                return this.BoxQtyField;
            }
            set {
                if ((this.BoxQtyField.Equals(value) != true)) {
                    this.BoxQtyField = value;
                    this.RaisePropertyChanged("BoxQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColumnQty {
            get {
                return this.ColumnQtyField;
            }
            set {
                if ((this.ColumnQtyField.Equals(value) != true)) {
                    this.ColumnQtyField = value;
                    this.RaisePropertyChanged("ColumnQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IDKeyWords {
            get {
                return this.IDKeyWordsField;
            }
            set {
                if ((object.ReferenceEquals(this.IDKeyWordsField, value) != true)) {
                    this.IDKeyWordsField = value;
                    this.RaisePropertyChanged("IDKeyWords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDNumber {
            get {
                return this.IDNumberField;
            }
            set {
                if ((this.IDNumberField.Equals(value) != true)) {
                    this.IDNumberField = value;
                    this.RaisePropertyChanged("IDNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDt {
            get {
                return this.ModifyDtField;
            }
            set {
                if ((this.ModifyDtField.Equals(value) != true)) {
                    this.ModifyDtField = value;
                    this.RaisePropertyChanged("ModifyDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductModel {
            get {
                return this.ProductModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductModelField, value) != true)) {
                    this.ProductModelField = value;
                    this.RaisePropertyChanged("ProductModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QieShu {
            get {
                return this.QieShuField;
            }
            set {
                if ((this.QieShuField.Equals(value) != true)) {
                    this.QieShuField = value;
                    this.RaisePropertyChanged("QieShu");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowQty {
            get {
                return this.RowQtyField;
            }
            set {
                if ((this.RowQtyField.Equals(value) != true)) {
                    this.RowQtyField = value;
                    this.RaisePropertyChanged("RowQty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QualityInfo", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class QualityInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoType {
            get {
                return this.InfoTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoTypeField, value) != true)) {
                    this.InfoTypeField = value;
                    this.RaisePropertyChanged("InfoType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockBox", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockBox : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreateAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockDetail[] StockDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Tray TrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TrayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPrintField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarCode {
            get {
                return this.BarCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarCodeField, value) != true)) {
                    this.BarCodeField = value;
                    this.RaisePropertyChanged("BarCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreateAccountID {
            get {
                return this.CreateAccountIDField;
            }
            set {
                if ((this.CreateAccountIDField.Equals(value) != true)) {
                    this.CreateAccountIDField = value;
                    this.RaisePropertyChanged("CreateAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsModify {
            get {
                return this.IsModifyField;
            }
            set {
                if ((this.IsModifyField.Equals(value) != true)) {
                    this.IsModifyField = value;
                    this.RaisePropertyChanged("IsModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail[] StockDetails {
            get {
                return this.StockDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.StockDetailsField, value) != true)) {
                    this.StockDetailsField = value;
                    this.RaisePropertyChanged("StockDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Tray Tray {
            get {
                return this.TrayField;
            }
            set {
                if ((object.ReferenceEquals(this.TrayField, value) != true)) {
                    this.TrayField = value;
                    this.RaisePropertyChanged("Tray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TrayID {
            get {
                return this.TrayIDField;
            }
            set {
                if ((this.TrayIDField.Equals(value) != true)) {
                    this.TrayIDField = value;
                    this.RaisePropertyChanged("TrayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPrint {
            get {
                return this.isPrintField;
            }
            set {
                if ((this.isPrintField.Equals(value) != true)) {
                    this.isPrintField = value;
                    this.RaisePropertyChanged("isPrint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tray", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Tray : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockBox[] StockBoxesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarCode {
            get {
                return this.BarCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarCodeField, value) != true)) {
                    this.BarCodeField = value;
                    this.RaisePropertyChanged("BarCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox[] StockBoxes {
            get {
                return this.StockBoxesField;
            }
            set {
                if ((object.ReferenceEquals(this.StockBoxesField, value) != true)) {
                    this.StockBoxesField = value;
                    this.RaisePropertyChanged("StockBoxes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockDetail", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DuMoAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DuMoAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DuMoDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DuMoImgInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DuMoInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DuMoNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FanGongNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GlassIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFanGongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHOLDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPaoGuangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsPaoGuangOverInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTuiHuoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> JianBaoAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JianBaoAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> JianBaoDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JianBaoImgInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JianBaoInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JianBaoNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PaoGuangAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoGuangAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PaoGuangDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoGuangImgInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoGuangInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoGuangMianField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoGuangNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaoguangTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockBox StockBoxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StockBoxIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StockInDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StockInImgInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StockInInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockLot StockLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockLotIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((this.AccountIDField.Equals(value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DuMoAccountID {
            get {
                return this.DuMoAccountIDField;
            }
            set {
                if ((this.DuMoAccountIDField.Equals(value) != true)) {
                    this.DuMoAccountIDField = value;
                    this.RaisePropertyChanged("DuMoAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DuMoAccountName {
            get {
                return this.DuMoAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DuMoAccountNameField, value) != true)) {
                    this.DuMoAccountNameField = value;
                    this.RaisePropertyChanged("DuMoAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DuMoDT {
            get {
                return this.DuMoDTField;
            }
            set {
                if ((this.DuMoDTField.Equals(value) != true)) {
                    this.DuMoDTField = value;
                    this.RaisePropertyChanged("DuMoDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DuMoImgInfo {
            get {
                return this.DuMoImgInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DuMoImgInfoField, value) != true)) {
                    this.DuMoImgInfoField = value;
                    this.RaisePropertyChanged("DuMoImgInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DuMoInfo {
            get {
                return this.DuMoInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DuMoInfoField, value) != true)) {
                    this.DuMoInfoField = value;
                    this.RaisePropertyChanged("DuMoInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DuMoNum {
            get {
                return this.DuMoNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DuMoNumField, value) != true)) {
                    this.DuMoNumField = value;
                    this.RaisePropertyChanged("DuMoNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FanGongNum {
            get {
                return this.FanGongNumField;
            }
            set {
                if ((this.FanGongNumField.Equals(value) != true)) {
                    this.FanGongNumField = value;
                    this.RaisePropertyChanged("FanGongNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GlassID {
            get {
                return this.GlassIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GlassIDField, value) != true)) {
                    this.GlassIDField = value;
                    this.RaisePropertyChanged("GlassID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFanGong {
            get {
                return this.IsFanGongField;
            }
            set {
                if ((this.IsFanGongField.Equals(value) != true)) {
                    this.IsFanGongField = value;
                    this.RaisePropertyChanged("IsFanGong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHOLD {
            get {
                return this.IsHOLDField;
            }
            set {
                if ((this.IsHOLDField.Equals(value) != true)) {
                    this.IsHOLDField = value;
                    this.RaisePropertyChanged("IsHOLD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPaoGuang {
            get {
                return this.IsPaoGuangField;
            }
            set {
                if ((this.IsPaoGuangField.Equals(value) != true)) {
                    this.IsPaoGuangField = value;
                    this.RaisePropertyChanged("IsPaoGuang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsPaoGuangOverInfo {
            get {
                return this.IsPaoGuangOverInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.IsPaoGuangOverInfoField, value) != true)) {
                    this.IsPaoGuangOverInfoField = value;
                    this.RaisePropertyChanged("IsPaoGuangOverInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTuiHuo {
            get {
                return this.IsTuiHuoField;
            }
            set {
                if ((this.IsTuiHuoField.Equals(value) != true)) {
                    this.IsTuiHuoField = value;
                    this.RaisePropertyChanged("IsTuiHuo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> JianBaoAccountID {
            get {
                return this.JianBaoAccountIDField;
            }
            set {
                if ((this.JianBaoAccountIDField.Equals(value) != true)) {
                    this.JianBaoAccountIDField = value;
                    this.RaisePropertyChanged("JianBaoAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JianBaoAccountName {
            get {
                return this.JianBaoAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JianBaoAccountNameField, value) != true)) {
                    this.JianBaoAccountNameField = value;
                    this.RaisePropertyChanged("JianBaoAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> JianBaoDT {
            get {
                return this.JianBaoDTField;
            }
            set {
                if ((this.JianBaoDTField.Equals(value) != true)) {
                    this.JianBaoDTField = value;
                    this.RaisePropertyChanged("JianBaoDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JianBaoImgInfo {
            get {
                return this.JianBaoImgInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.JianBaoImgInfoField, value) != true)) {
                    this.JianBaoImgInfoField = value;
                    this.RaisePropertyChanged("JianBaoImgInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JianBaoInfo {
            get {
                return this.JianBaoInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.JianBaoInfoField, value) != true)) {
                    this.JianBaoInfoField = value;
                    this.RaisePropertyChanged("JianBaoInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JianBaoNum {
            get {
                return this.JianBaoNumField;
            }
            set {
                if ((object.ReferenceEquals(this.JianBaoNumField, value) != true)) {
                    this.JianBaoNumField = value;
                    this.RaisePropertyChanged("JianBaoNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PaoGuangAccountID {
            get {
                return this.PaoGuangAccountIDField;
            }
            set {
                if ((this.PaoGuangAccountIDField.Equals(value) != true)) {
                    this.PaoGuangAccountIDField = value;
                    this.RaisePropertyChanged("PaoGuangAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoGuangAccountName {
            get {
                return this.PaoGuangAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoGuangAccountNameField, value) != true)) {
                    this.PaoGuangAccountNameField = value;
                    this.RaisePropertyChanged("PaoGuangAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PaoGuangDT {
            get {
                return this.PaoGuangDTField;
            }
            set {
                if ((this.PaoGuangDTField.Equals(value) != true)) {
                    this.PaoGuangDTField = value;
                    this.RaisePropertyChanged("PaoGuangDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoGuangImgInfo {
            get {
                return this.PaoGuangImgInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoGuangImgInfoField, value) != true)) {
                    this.PaoGuangImgInfoField = value;
                    this.RaisePropertyChanged("PaoGuangImgInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoGuangInfo {
            get {
                return this.PaoGuangInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoGuangInfoField, value) != true)) {
                    this.PaoGuangInfoField = value;
                    this.RaisePropertyChanged("PaoGuangInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoGuangMian {
            get {
                return this.PaoGuangMianField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoGuangMianField, value) != true)) {
                    this.PaoGuangMianField = value;
                    this.RaisePropertyChanged("PaoGuangMian");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoGuangNum {
            get {
                return this.PaoGuangNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoGuangNumField, value) != true)) {
                    this.PaoGuangNumField = value;
                    this.RaisePropertyChanged("PaoGuangNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaoguangType {
            get {
                return this.PaoguangTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PaoguangTypeField, value) != true)) {
                    this.PaoguangTypeField = value;
                    this.RaisePropertyChanged("PaoguangType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Qty {
            get {
                return this.QtyField;
            }
            set {
                if ((this.QtyField.Equals(value) != true)) {
                    this.QtyField = value;
                    this.RaisePropertyChanged("Qty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox StockBox {
            get {
                return this.StockBoxField;
            }
            set {
                if ((object.ReferenceEquals(this.StockBoxField, value) != true)) {
                    this.StockBoxField = value;
                    this.RaisePropertyChanged("StockBox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StockBoxID {
            get {
                return this.StockBoxIDField;
            }
            set {
                if ((this.StockBoxIDField.Equals(value) != true)) {
                    this.StockBoxIDField = value;
                    this.RaisePropertyChanged("StockBoxID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StockInDT {
            get {
                return this.StockInDTField;
            }
            set {
                if ((this.StockInDTField.Equals(value) != true)) {
                    this.StockInDTField = value;
                    this.RaisePropertyChanged("StockInDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockInImgInfo {
            get {
                return this.StockInImgInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.StockInImgInfoField, value) != true)) {
                    this.StockInImgInfoField = value;
                    this.RaisePropertyChanged("StockInImgInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockInInfo {
            get {
                return this.StockInInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.StockInInfoField, value) != true)) {
                    this.StockInInfoField = value;
                    this.RaisePropertyChanged("StockInInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot StockLot {
            get {
                return this.StockLotField;
            }
            set {
                if ((object.ReferenceEquals(this.StockLotField, value) != true)) {
                    this.StockLotField = value;
                    this.RaisePropertyChanged("StockLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockLotID {
            get {
                return this.StockLotIDField;
            }
            set {
                if ((this.StockLotIDField.Equals(value) != true)) {
                    this.StockLotIDField = value;
                    this.RaisePropertyChanged("StockLotID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockLot", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockLot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreateAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreateAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailInfoHOLDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuanKongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageHOLDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDuMoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsImportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsJianBaoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PCSQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockDetail[] StockDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TuiHuoCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreateAccountID {
            get {
                return this.CreateAccountIDField;
            }
            set {
                if ((this.CreateAccountIDField.Equals(value) != true)) {
                    this.CreateAccountIDField = value;
                    this.RaisePropertyChanged("CreateAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateAccountName {
            get {
                return this.CreateAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateAccountNameField, value) != true)) {
                    this.CreateAccountNameField = value;
                    this.RaisePropertyChanged("CreateAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailInfoHOLD {
            get {
                return this.DetailInfoHOLDField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailInfoHOLDField, value) != true)) {
                    this.DetailInfoHOLDField = value;
                    this.RaisePropertyChanged("DetailInfoHOLD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuanKong {
            get {
                return this.GuanKongField;
            }
            set {
                if ((object.ReferenceEquals(this.GuanKongField, value) != true)) {
                    this.GuanKongField = value;
                    this.RaisePropertyChanged("GuanKong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageHOLD {
            get {
                return this.ImageHOLDField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageHOLDField, value) != true)) {
                    this.ImageHOLDField = value;
                    this.RaisePropertyChanged("ImageHOLD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDuMo {
            get {
                return this.IsDuMoField;
            }
            set {
                if ((this.IsDuMoField.Equals(value) != true)) {
                    this.IsDuMoField = value;
                    this.RaisePropertyChanged("IsDuMo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsImport {
            get {
                return this.IsImportField;
            }
            set {
                if ((this.IsImportField.Equals(value) != true)) {
                    this.IsImportField = value;
                    this.RaisePropertyChanged("IsImport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsJianBao {
            get {
                return this.IsJianBaoField;
            }
            set {
                if ((this.IsJianBaoField.Equals(value) != true)) {
                    this.IsJianBaoField = value;
                    this.RaisePropertyChanged("IsJianBao");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNo {
            get {
                return this.LotNoField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNoField, value) != true)) {
                    this.LotNoField = value;
                    this.RaisePropertyChanged("LotNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PCSQty {
            get {
                return this.PCSQtyField;
            }
            set {
                if ((this.PCSQtyField.Equals(value) != true)) {
                    this.PCSQtyField = value;
                    this.RaisePropertyChanged("PCSQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProModel {
            get {
                return this.ProModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ProModelField, value) != true)) {
                    this.ProModelField = value;
                    this.RaisePropertyChanged("ProModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail[] StockDetails {
            get {
                return this.StockDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.StockDetailsField, value) != true)) {
                    this.StockDetailsField = value;
                    this.RaisePropertyChanged("StockDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TuiHuoCount {
            get {
                return this.TuiHuoCountField;
            }
            set {
                if ((this.TuiHuoCountField.Equals(value) != true)) {
                    this.TuiHuoCountField = value;
                    this.RaisePropertyChanged("TuiHuoCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockLotOut", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockLotOut : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PCSQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox[] Remove_StockBoxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] StockOutDetailsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNo {
            get {
                return this.LotNoField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNoField, value) != true)) {
                    this.LotNoField = value;
                    this.RaisePropertyChanged("LotNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PCSQty {
            get {
                return this.PCSQtyField;
            }
            set {
                if ((this.PCSQtyField.Equals(value) != true)) {
                    this.PCSQtyField = value;
                    this.RaisePropertyChanged("PCSQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProModel {
            get {
                return this.ProModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ProModelField, value) != true)) {
                    this.ProModelField = value;
                    this.RaisePropertyChanged("ProModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox[] Remove_StockBox {
            get {
                return this.Remove_StockBoxField;
            }
            set {
                if ((object.ReferenceEquals(this.Remove_StockBoxField, value) != true)) {
                    this.Remove_StockBoxField = value;
                    this.RaisePropertyChanged("Remove_StockBox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] StockOutDetails {
            get {
                return this.StockOutDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.StockOutDetailsField, value) != true)) {
                    this.StockOutDetailsField = value;
                    this.RaisePropertyChanged("StockOutDetails");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Remove_StockBox", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Remove_StockBox : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Remove_Tray Remove_TrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockLotOut StockLotOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockLotOutIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] StockOutDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TrayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPrintField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarCode {
            get {
                return this.BarCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarCodeField, value) != true)) {
                    this.BarCodeField = value;
                    this.RaisePropertyChanged("BarCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Remove_Tray Remove_Tray {
            get {
                return this.Remove_TrayField;
            }
            set {
                if ((object.ReferenceEquals(this.Remove_TrayField, value) != true)) {
                    this.Remove_TrayField = value;
                    this.RaisePropertyChanged("Remove_Tray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut StockLotOut {
            get {
                return this.StockLotOutField;
            }
            set {
                if ((object.ReferenceEquals(this.StockLotOutField, value) != true)) {
                    this.StockLotOutField = value;
                    this.RaisePropertyChanged("StockLotOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockLotOutID {
            get {
                return this.StockLotOutIDField;
            }
            set {
                if ((this.StockLotOutIDField.Equals(value) != true)) {
                    this.StockLotOutIDField = value;
                    this.RaisePropertyChanged("StockLotOutID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] StockOutDetails {
            get {
                return this.StockOutDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.StockOutDetailsField, value) != true)) {
                    this.StockOutDetailsField = value;
                    this.RaisePropertyChanged("StockOutDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TrayID {
            get {
                return this.TrayIDField;
            }
            set {
                if ((this.TrayIDField.Equals(value) != true)) {
                    this.TrayIDField = value;
                    this.RaisePropertyChanged("TrayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPrint {
            get {
                return this.isPrintField;
            }
            set {
                if ((this.isPrintField.Equals(value) != true)) {
                    this.isPrintField = value;
                    this.RaisePropertyChanged("isPrint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockOutDetail", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockOutDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GLassIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox Remove_StockBoxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StockBoxIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.StockLotOut StockLotOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockLotOutIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((this.AccountIDField.Equals(value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GLassID {
            get {
                return this.GLassIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GLassIDField, value) != true)) {
                    this.GLassIDField = value;
                    this.RaisePropertyChanged("GLassID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox Remove_StockBox {
            get {
                return this.Remove_StockBoxField;
            }
            set {
                if ((object.ReferenceEquals(this.Remove_StockBoxField, value) != true)) {
                    this.Remove_StockBoxField = value;
                    this.RaisePropertyChanged("Remove_StockBox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StockBoxID {
            get {
                return this.StockBoxIDField;
            }
            set {
                if ((this.StockBoxIDField.Equals(value) != true)) {
                    this.StockBoxIDField = value;
                    this.RaisePropertyChanged("StockBoxID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut StockLotOut {
            get {
                return this.StockLotOutField;
            }
            set {
                if ((object.ReferenceEquals(this.StockLotOutField, value) != true)) {
                    this.StockLotOutField = value;
                    this.RaisePropertyChanged("StockLotOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockLotOutID {
            get {
                return this.StockLotOutIDField;
            }
            set {
                if ((this.StockLotOutIDField.Equals(value) != true)) {
                    this.StockLotOutIDField = value;
                    this.RaisePropertyChanged("StockLotOutID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Remove_Tray", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Remove_Tray : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox[] Remove_StockBoxField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarCode {
            get {
                return this.BarCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarCodeField, value) != true)) {
                    this.BarCodeField = value;
                    this.RaisePropertyChanged("BarCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SCG.SINOStock.WCFService.SINOStockService.Remove_StockBox[] Remove_StockBox {
            get {
                return this.Remove_StockBoxField;
            }
            set {
                if ((object.ReferenceEquals(this.Remove_StockBoxField, value) != true)) {
                    this.Remove_StockBoxField = value;
                    this.RaisePropertyChanged("Remove_StockBox");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockOutQtyHelper", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.WCF", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockOutQtyHelper : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOTNOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockOutQtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOTNO {
            get {
                return this.LOTNOField;
            }
            set {
                if ((object.ReferenceEquals(this.LOTNOField, value) != true)) {
                    this.LOTNOField = value;
                    this.RaisePropertyChanged("LOTNO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Qty {
            get {
                return this.QtyField;
            }
            set {
                if ((this.QtyField.Equals(value) != true)) {
                    this.QtyField = value;
                    this.RaisePropertyChanged("Qty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockOutQty {
            get {
                return this.StockOutQtyField;
            }
            set {
                if ((this.StockOutQtyField.Equals(value) != true)) {
                    this.StockOutQtyField = value;
                    this.RaisePropertyChanged("StockOutQty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockProDic", Namespace="http://schemas.datacontract.org/2004/07/SCG.SINOStock.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockProDic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PCSQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockLotIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDt {
            get {
                return this.CreateDtField;
            }
            set {
                if ((this.CreateDtField.Equals(value) != true)) {
                    this.CreateDtField = value;
                    this.RaisePropertyChanged("CreateDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PCSQty {
            get {
                return this.PCSQtyField;
            }
            set {
                if ((this.PCSQtyField.Equals(value) != true)) {
                    this.PCSQtyField = value;
                    this.RaisePropertyChanged("PCSQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProModel {
            get {
                return this.ProModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ProModelField, value) != true)) {
                    this.ProModelField = value;
                    this.RaisePropertyChanged("ProModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockLotID {
            get {
                return this.StockLotIDField;
            }
            set {
                if ((this.StockLotIDField.Equals(value) != true)) {
                    this.StockLotIDField = value;
                    this.RaisePropertyChanged("StockLotID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SINOStockService.ISINOStockService")]
    public interface ISINOStockService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/Login", ReplyAction="http://tempuri.org/ISINOStockService/LoginResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Account Login(string strNumber, string strPwd, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/Login", ReplyAction="http://tempuri.org/ISINOStockService/LoginResponse")]
        System.IAsyncResult BeginLogin(string strNumber, string strPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Account EndLogin(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/Login_Ex", ReplyAction="http://tempuri.org/ISINOStockService/Login_ExResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Account Login_Ex(string strMACAddress, string strNumber, string strPwd, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/Login_Ex", ReplyAction="http://tempuri.org/ISINOStockService/Login_ExResponse")]
        System.IAsyncResult BeginLogin_Ex(string strMACAddress, string strNumber, string strPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Account EndLogin_Ex(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetAccountList", ReplyAction="http://tempuri.org/ISINOStockService/GetAccountListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Account[] GetAccountList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetAccountList", ReplyAction="http://tempuri.org/ISINOStockService/GetAccountListResponse")]
        System.IAsyncResult BeginGetAccountList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Account[] EndGetAccountList(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddAccount", ReplyAction="http://tempuri.org/ISINOStockService/AddAccountResponse")]
        bool AddAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddAccount", ReplyAction="http://tempuri.org/ISINOStockService/AddAccountResponse")]
        System.IAsyncResult BeginAddAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddAccount(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyAccount", ReplyAction="http://tempuri.org/ISINOStockService/ModifyAccountResponse")]
        bool ModifyAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyAccount", ReplyAction="http://tempuri.org/ISINOStockService/ModifyAccountResponse")]
        System.IAsyncResult BeginModifyAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyAccount(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DelAccount", ReplyAction="http://tempuri.org/ISINOStockService/DelAccountResponse")]
        bool DelAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DelAccount", ReplyAction="http://tempuri.org/ISINOStockService/DelAccountResponse")]
        System.IAsyncResult BeginDelAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDelAccount(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ChangePwd", ReplyAction="http://tempuri.org/ISINOStockService/ChangePwdResponse")]
        bool ChangePwd(string checkCode, int AccountID, string OldPwd, string NewPwd, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ChangePwd", ReplyAction="http://tempuri.org/ISINOStockService/ChangePwdResponse")]
        System.IAsyncResult BeginChangePwd(string checkCode, int AccountID, string OldPwd, string NewPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePwd(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ExitCurrentAccount", ReplyAction="http://tempuri.org/ISINOStockService/ExitCurrentAccountResponse")]
        void ExitCurrentAccount(string checkCode, int AccountID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ExitCurrentAccount", ReplyAction="http://tempuri.org/ISINOStockService/ExitCurrentAccountResponse")]
        System.IAsyncResult BeginExitCurrentAccount(string checkCode, int AccountID, System.AsyncCallback callback, object asyncState);
        
        void EndExitCurrentAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetFormWorkList", ReplyAction="http://tempuri.org/ISINOStockService/GetFormWorkListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.FormWork[] GetFormWorkList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetFormWorkList", ReplyAction="http://tempuri.org/ISINOStockService/GetFormWorkListResponse")]
        System.IAsyncResult BeginGetFormWorkList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.FormWork[] EndGetFormWorkList(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddFormWork", ReplyAction="http://tempuri.org/ISINOStockService/AddFormWorkResponse")]
        bool AddFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddFormWork", ReplyAction="http://tempuri.org/ISINOStockService/AddFormWorkResponse")]
        System.IAsyncResult BeginAddFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddFormWork(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyFormWork", ReplyAction="http://tempuri.org/ISINOStockService/ModifyFormWorkResponse")]
        bool ModifyFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyFormWork", ReplyAction="http://tempuri.org/ISINOStockService/ModifyFormWorkResponse")]
        System.IAsyncResult BeginModifyFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyFormWork(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DelFormWork", ReplyAction="http://tempuri.org/ISINOStockService/DelFormWorkResponse")]
        bool DelFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DelFormWork", ReplyAction="http://tempuri.org/ISINOStockService/DelFormWorkResponse")]
        System.IAsyncResult BeginDelFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDelFormWork(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetProductStrList", ReplyAction="http://tempuri.org/ISINOStockService/GetProductStrListResponse")]
        string[] GetProductStrList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetProductStrList", ReplyAction="http://tempuri.org/ISINOStockService/GetProductStrListResponse")]
        System.IAsyncResult BeginGetProductStrList(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetProductStrList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetFormWorkByProModel", ReplyAction="http://tempuri.org/ISINOStockService/GetFormWorkByProModelResponse")]
        SCG.SINOStock.WCFService.SINOStockService.FormWork GetFormWorkByProModel(string checkCode, int AccountID, string proModel, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetFormWorkByProModel", ReplyAction="http://tempuri.org/ISINOStockService/GetFormWorkByProModelResponse")]
        System.IAsyncResult BeginGetFormWorkByProModel(string checkCode, int AccountID, string proModel, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.FormWork EndGetFormWorkByProModel(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DoWork", ReplyAction="http://tempuri.org/ISINOStockService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DoWork", ReplyAction="http://tempuri.org/ISINOStockService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetAccountById", ReplyAction="http://tempuri.org/ISINOStockService/GetAccountByIdResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Account GetAccountById();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetAccountById", ReplyAction="http://tempuri.org/ISINOStockService/GetAccountByIdResponse")]
        System.IAsyncResult BeginGetAccountById(System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Account EndGetAccountById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetQualityInfoList", ReplyAction="http://tempuri.org/ISINOStockService/GetQualityInfoListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] GetQualityInfoList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetQualityInfoList", ReplyAction="http://tempuri.org/ISINOStockService/GetQualityInfoListResponse")]
        System.IAsyncResult BeginGetQualityInfoList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] EndGetQualityInfoList(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/AddQualityInfoResponse")]
        bool AddQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/AddQualityInfoResponse")]
        System.IAsyncResult BeginAddQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddQualityInfo(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/ModifyQualityInfoResponse")]
        bool ModifyQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/ModifyQualityInfoResponse")]
        System.IAsyncResult BeginModifyQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyQualityInfo(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DelQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/DelQualityInfoResponse")]
        bool DelQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DelQualityInfo", ReplyAction="http://tempuri.org/ISINOStockService/DelQualityInfoResponse")]
        System.IAsyncResult BeginDelQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDelQualityInfo(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetRoleList", ReplyAction="http://tempuri.org/ISINOStockService/GetRoleListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Role[] GetRoleList(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetRoleList", ReplyAction="http://tempuri.org/ISINOStockService/GetRoleListResponse")]
        System.IAsyncResult BeginGetRoleList(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Role[] EndGetRoleList(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddRole", ReplyAction="http://tempuri.org/ISINOStockService/AddRoleResponse")]
        bool AddRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddRole", ReplyAction="http://tempuri.org/ISINOStockService/AddRoleResponse")]
        System.IAsyncResult BeginAddRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddRole(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyRole", ReplyAction="http://tempuri.org/ISINOStockService/ModifyRoleResponse")]
        bool ModifyRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyRole", ReplyAction="http://tempuri.org/ISINOStockService/ModifyRoleResponse")]
        System.IAsyncResult BeginModifyRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyRole(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DelRole", ReplyAction="http://tempuri.org/ISINOStockService/DelRoleResponse")]
        bool DelRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DelRole", ReplyAction="http://tempuri.org/ISINOStockService/DelRoleResponse")]
        System.IAsyncResult BeginDelRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDelRole(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddStockBox", ReplyAction="http://tempuri.org/ISINOStockService/AddStockBoxResponse")]
        bool AddStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, ref bool IsPrintTray, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddStockBox", ReplyAction="http://tempuri.org/ISINOStockService/AddStockBoxResponse")]
        System.IAsyncResult BeginAddStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, ref bool IsPrintTray, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddStockBox(ref bool IsPrintTray, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockBoxToBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetStockBoxToBarCodeResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox GetStockBoxToBarCode(string checkCode, int AccountID, string BarCode, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockBoxToBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetStockBoxToBarCodeResponse")]
        System.IAsyncResult BeginGetStockBoxToBarCode(string checkCode, int AccountID, string BarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetStockBoxToBarCode(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetMaxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxBarCodeResponse")]
        string GetMaxBarCode(string checkCode, int AccountID, int LotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetMaxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxBarCodeResponse")]
        System.IAsyncResult BeginGetMaxBarCode(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        string EndGetMaxBarCode(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetBoxListByDt", ReplyAction="http://tempuri.org/ISINOStockService/GetBoxListByDtResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox[] GetBoxListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetBoxListByDt", ReplyAction="http://tempuri.org/ISINOStockService/GetBoxListByDtResponse")]
        System.IAsyncResult BeginGetBoxListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox[] EndGetBoxListByDt(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetMaxStockBox", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxStockBoxResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox GetMaxStockBox(string checkCode, int AccountID, int LotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetMaxStockBox", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxStockBoxResponse")]
        System.IAsyncResult BeginGetMaxStockBox(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetMaxStockBox(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyStockBox", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockBoxResponse")]
        bool ModifyStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, ref bool IsPrintTray, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyStockBox", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockBoxResponse")]
        System.IAsyncResult BeginModifyStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, ref bool IsPrintTray, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyStockBox(ref bool IsPrintTray, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetMaxBarCode_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxBarCode_ExResponse")]
        string GetMaxBarCode_Ex(string checkCode, int AccountID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetMaxBarCode_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxBarCode_ExResponse")]
        System.IAsyncResult BeginGetMaxBarCode_Ex(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        string EndGetMaxBarCode_Ex(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetMaxStockBox_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxStockBox_ExResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox GetMaxStockBox_Ex(string checkCode, int AccountID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetMaxStockBox_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxStockBox_ExResponse")]
        System.IAsyncResult BeginGetMaxStockBox_Ex(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetMaxStockBox_Ex(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ChangeBoxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ChangeBoxBarCodeResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox ChangeBoxBarCode(string strBarCode, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ChangeBoxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ChangeBoxBarCodeResponse")]
        System.IAsyncResult BeginChangeBoxBarCode(string strBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndChangeBoxBarCode(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ChangeBoxBarCode_Pro", ReplyAction="http://tempuri.org/ISINOStockService/ChangeBoxBarCode_ProResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox ChangeBoxBarCode_Pro(string strNewBarCode, string strOldBarCode, int AccountID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ChangeBoxBarCode_Pro", ReplyAction="http://tempuri.org/ISINOStockService/ChangeBoxBarCode_ProResponse")]
        System.IAsyncResult BeginChangeBoxBarCode_Pro(string strNewBarCode, string strOldBarCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndChangeBoxBarCode_Pro(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyBoxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ModifyBoxBarCodeResponse")]
        bool ModifyBoxBarCode(string checkCode, int AccountID, string OldBarCode, string NewBarCode, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyBoxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ModifyBoxBarCodeResponse")]
        System.IAsyncResult BeginModifyBoxBarCode(string checkCode, int AccountID, string OldBarCode, string NewBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyBoxBarCode(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStocBoxkEntityByIsUnPrint", ReplyAction="http://tempuri.org/ISINOStockService/GetStocBoxkEntityByIsUnPrintResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockBox GetStocBoxkEntityByIsUnPrint(string checkCode, int AccountID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStocBoxkEntityByIsUnPrint", ReplyAction="http://tempuri.org/ISINOStockService/GetStocBoxkEntityByIsUnPrintResponse")]
        System.IAsyncResult BeginGetStocBoxkEntityByIsUnPrint(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetStocBoxkEntityByIsUnPrint(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockDetailList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockDetailListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockDetail[] GetStockDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockDetailList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockDetailListResponse")]
        System.IAsyncResult BeginGetStockDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockDetail[] EndGetStockDetailList(ref int CountQty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/AddStockDetailResponse")]
        bool AddStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, ref int QtyCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/AddStockDetailResponse")]
        System.IAsyncResult BeginAddStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, ref int QtyCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddStockDetail(ref int QtyCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockDetailResponse")]
        bool ModifyStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockDetailResponse")]
        System.IAsyncResult BeginModifyStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyStockDetail(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DeleteStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockDetailResponse")]
        bool DeleteStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DeleteStockDetail", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockDetailResponse")]
        System.IAsyncResult BeginDeleteStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteStockDetail(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/UpdateStockDetailStatus", ReplyAction="http://tempuri.org/ISINOStockService/UpdateStockDetailStatusResponse")]
        bool UpdateStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/UpdateStockDetailStatus", ReplyAction="http://tempuri.org/ISINOStockService/UpdateStockDetailStatusResponse")]
        System.IAsyncResult BeginUpdateStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateStockDetailStatus(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/CheckStockDetailStatus", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetailStatusResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockDetail CheckStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/CheckStockDetailStatus", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetailStatusResponse")]
        System.IAsyncResult BeginCheckStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockDetail EndCheckStockDetailStatus(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/CheckStockDetailStatus_Out", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetailStatus_OutResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockDetail CheckStockDetailStatus_Out(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/CheckStockDetailStatus_Out", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetailStatus_OutResponse")]
        System.IAsyncResult BeginCheckStockDetailStatus_Out(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockDetail EndCheckStockDetailStatus_Out(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockDetailByGlassID", ReplyAction="http://tempuri.org/ISINOStockService/GetStockDetailByGlassIDResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockDetail GetStockDetailByGlassID(string checkCode, int AccountID, string GlassID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockDetailByGlassID", ReplyAction="http://tempuri.org/ISINOStockService/GetStockDetailByGlassIDResponse")]
        System.IAsyncResult BeginGetStockDetailByGlassID(string checkCode, int AccountID, string GlassID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockDetail EndGetStockDetailByGlassID(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/CheckStockDetail_In", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetail_InResponse")]
        bool CheckStockDetail_In(string checkCode, int AccountID, string strGlassID, int strLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/CheckStockDetail_In", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetail_InResponse")]
        System.IAsyncResult BeginCheckStockDetail_In(string checkCode, int AccountID, string strGlassID, int strLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckStockDetail_In(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/CheckStockDetail_In_Ex", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetail_In_ExResponse")]
        bool CheckStockDetail_In_Ex(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/CheckStockDetail_In_Ex", ReplyAction="http://tempuri.org/ISINOStockService/CheckStockDetail_In_ExResponse")]
        System.IAsyncResult BeginCheckStockDetail_In_Ex(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckStockDetail_In_Ex(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DelStockDetailAndTuihuoCount", ReplyAction="http://tempuri.org/ISINOStockService/DelStockDetailAndTuihuoCountResponse")]
        bool DelStockDetailAndTuihuoCount(string checkCode, int AccountID, int StockDetailID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DelStockDetailAndTuihuoCount", ReplyAction="http://tempuri.org/ISINOStockService/DelStockDetailAndTuihuoCountResponse")]
        System.IAsyncResult BeginDelStockDetailAndTuihuoCount(string checkCode, int AccountID, int StockDetailID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDelStockDetailAndTuihuoCount(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_OutResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut GetStockLotOutEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_OutResponse")]
        System.IAsyncResult BeginGetStockLotOutEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut EndGetStockLotOutEntityByLotNo_Out(ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out_NO", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out_NOResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut GetStockLotOutEntityByLotNo_Out_NO(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out_NO", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutEntityByLotNo_Out_NOResponse")]
        System.IAsyncResult BeginGetStockLotOutEntityByLotNo_Out_NO(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut EndGetStockLotOutEntityByLotNo_Out_NO(ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/EndStockLotOut", ReplyAction="http://tempuri.org/ISINOStockService/EndStockLotOutResponse")]
        bool EndStockLotOut(string checkCode, int AccountID, int StockLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/EndStockLotOut", ReplyAction="http://tempuri.org/ISINOStockService/EndStockLotOutResponse")]
        System.IAsyncResult BeginEndStockLotOut(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndEndStockLotOut(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DeleteStockLotOut", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockLotOutResponse")]
        bool DeleteStockLotOut(string checkCode, int AccountID, int StockLotOutID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DeleteStockLotOut", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockLotOutResponse")]
        System.IAsyncResult BeginDeleteStockLotOut(string checkCode, int AccountID, int StockLotOutID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteStockLotOut(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/CheckLotNo", ReplyAction="http://tempuri.org/ISINOStockService/CheckLotNoResponse")]
        bool CheckLotNo(string checkCode, int AccountID, string LotNo, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/CheckLotNo", ReplyAction="http://tempuri.org/ISINOStockService/CheckLotNoResponse")]
        System.IAsyncResult BeginCheckLotNo(string checkCode, int AccountID, string LotNo, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckLotNo(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetNoStockOutGlass", ReplyAction="http://tempuri.org/ISINOStockService/GetNoStockOutGlassResponse")]
        string[] GetNoStockOutGlass(string checkCode, int AccountID, string LotNo, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetNoStockOutGlass", ReplyAction="http://tempuri.org/ISINOStockService/GetNoStockOutGlassResponse")]
        System.IAsyncResult BeginGetNoStockOutGlass(string checkCode, int AccountID, string LotNo, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetNoStockOutGlass(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotOutList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] GetStockLotOutList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotOutList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotOutListResponse")]
        System.IAsyncResult BeginGetStockLotOutList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] EndGetStockLotOutList(ref int listCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoResponse")]
        System.IAsyncResult BeginGetStockLotEntityByLotNo(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo(ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_ExResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo_Ex(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int HOLDQty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_Ex", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_ExResponse")]
        System.IAsyncResult BeginGetStockLotEntityByLotNo_Ex(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo_Ex(ref int Qty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotEntityListByLotNo", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityListByLotNoResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotEntityListByLotNo(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotEntityListByLotNo", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityListByLotNoResponse")]
        System.IAsyncResult BeginGetStockLotEntityListByLotNo(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotEntityListByLotNo(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddStockLot", ReplyAction="http://tempuri.org/ISINOStockService/AddStockLotResponse")]
        bool AddStockLot(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, ref int StockLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddStockLot", ReplyAction="http://tempuri.org/ISINOStockService/AddStockLotResponse")]
        System.IAsyncResult BeginAddStockLot(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, ref int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddStockLot(ref int StockLotID, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/EndStockLot", ReplyAction="http://tempuri.org/ISINOStockService/EndStockLotResponse")]
        bool EndStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/EndStockLot", ReplyAction="http://tempuri.org/ISINOStockService/EndStockLotResponse")]
        System.IAsyncResult BeginEndStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndEndStockLot(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DeleteStockLot", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockLotResponse")]
        bool DeleteStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DeleteStockLot", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockLotResponse")]
        System.IAsyncResult BeginDeleteStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteStockLot(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_Out", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_OutResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref int OutCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_Out", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNo_OutResponse")]
        System.IAsyncResult BeginGetStockLotEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo_Out(ref int OutCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotListResponse")]
        System.IAsyncResult BeginGetStockLotList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotList(ref int listCount, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotList_Two", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotList_TwoResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotList_Two(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotList_Two", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotList_TwoResponse")]
        System.IAsyncResult BeginGetStockLotList_Two(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotList_Two(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/HOLDAllToNewStockLot", ReplyAction="http://tempuri.org/ISINOStockService/HOLDAllToNewStockLotResponse")]
        bool HOLDAllToNewStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/HOLDAllToNewStockLot", ReplyAction="http://tempuri.org/ISINOStockService/HOLDAllToNewStockLotResponse")]
        System.IAsyncResult BeginHOLDAllToNewStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndHOLDAllToNewStockLot(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockOutQtys", ReplyAction="http://tempuri.org/ISINOStockService/GetStockOutQtysResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] GetStockOutQtys(int[] StockLotIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockOutQtys", ReplyAction="http://tempuri.org/ISINOStockService/GetStockOutQtysResponse")]
        System.IAsyncResult BeginGetStockOutQtys(int[] StockLotIDs, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] EndGetStockOutQtys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoTotal", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoTotalResponse")]
        bool GetStockLotEntityByLotNoTotal(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoTotal", ReplyAction="http://tempuri.org/ISINOStockService/GetStockLotEntityByLotNoTotalResponse")]
        System.IAsyncResult BeginGetStockLotEntityByLotNoTotal(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndGetStockLotEntityByLotNoTotal(ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockOutDetailList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockOutDetailListResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] GetStockOutDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockOutDetailList", ReplyAction="http://tempuri.org/ISINOStockService/GetStockOutDetailListResponse")]
        System.IAsyncResult BeginGetStockOutDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] EndGetStockOutDetailList(ref int CountQty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/AddStockOutDetailResponse")]
        bool AddStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/AddStockOutDetailResponse")]
        System.IAsyncResult BeginAddStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddStockOutDetail(ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetStockoutDetailByGlassID", ReplyAction="http://tempuri.org/ISINOStockService/GetStockoutDetailByGlassIDResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockOutDetail GetStockoutDetailByGlassID(string checkCode, int AccountID, string strGlassID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetStockoutDetailByGlassID", ReplyAction="http://tempuri.org/ISINOStockService/GetStockoutDetailByGlassIDResponse")]
        System.IAsyncResult BeginGetStockoutDetailByGlassID(string checkCode, int AccountID, string strGlassID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockOutDetail EndGetStockoutDetailByGlassID(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockOutDetailResponse")]
        bool ModifyStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/ModifyStockOutDetailResponse")]
        System.IAsyncResult BeginModifyStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyStockOutDetail(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/DeleteStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockOutDetailResponse")]
        bool DeleteStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/DeleteStockOutDetail", ReplyAction="http://tempuri.org/ISINOStockService/DeleteStockOutDetailResponse")]
        System.IAsyncResult BeginDeleteStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteStockOutDetail(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddStockProDic", ReplyAction="http://tempuri.org/ISINOStockService/AddStockProDicResponse")]
        bool AddStockProDic(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddStockProDic", ReplyAction="http://tempuri.org/ISINOStockService/AddStockProDicResponse")]
        System.IAsyncResult BeginAddStockProDic(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddStockProDic(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetProDicByProAndLotID", ReplyAction="http://tempuri.org/ISINOStockService/GetProDicByProAndLotIDResponse")]
        SCG.SINOStock.WCFService.SINOStockService.StockProDic GetProDicByProAndLotID(int LotID, string ProModel);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetProDicByProAndLotID", ReplyAction="http://tempuri.org/ISINOStockService/GetProDicByProAndLotIDResponse")]
        System.IAsyncResult BeginGetProDicByProAndLotID(int LotID, string ProModel, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.StockProDic EndGetProDicByProAndLotID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/AddTray", ReplyAction="http://tempuri.org/ISINOStockService/AddTrayResponse")]
        bool AddTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, ref int Qty, ref string[] Boxs, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/AddTray", ReplyAction="http://tempuri.org/ISINOStockService/AddTrayResponse")]
        System.IAsyncResult BeginAddTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, ref int Qty, ref string[] Boxs, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTray(ref int Qty, ref string[] Boxs, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetTrayByBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayByBarCodeResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Tray GetTrayByBarCode(string checkCode, int AccountID, string BarCode, ref int Qty, ref string ProModel, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetTrayByBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayByBarCodeResponse")]
        System.IAsyncResult BeginGetTrayByBarCode(string checkCode, int AccountID, string BarCode, ref int Qty, ref string ProModel, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Tray EndGetTrayByBarCode(ref int Qty, ref string ProModel, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetTrayMaxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayMaxBarCodeResponse")]
        string GetTrayMaxBarCode(string checkCode, int AccountID, int LogID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetTrayMaxBarCode", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayMaxBarCodeResponse")]
        System.IAsyncResult BeginGetTrayMaxBarCode(string checkCode, int AccountID, int LogID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        string EndGetTrayMaxBarCode(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetTrayListByDt", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayListByDtResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Tray[] GetTrayListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetTrayListByDt", ReplyAction="http://tempuri.org/ISINOStockService/GetTrayListByDtResponse")]
        System.IAsyncResult BeginGetTrayListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Tray[] EndGetTrayListByDt(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/GetMaxTray", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxTrayResponse")]
        SCG.SINOStock.WCFService.SINOStockService.Tray GetMaxTray(string checkCode, int AccountID, int LotID, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/GetMaxTray", ReplyAction="http://tempuri.org/ISINOStockService/GetMaxTrayResponse")]
        System.IAsyncResult BeginGetMaxTray(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        SCG.SINOStock.WCFService.SINOStockService.Tray EndGetMaxTray(ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ModifyTray", ReplyAction="http://tempuri.org/ISINOStockService/ModifyTrayResponse")]
        bool ModifyTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, ref int Qty, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ModifyTray", ReplyAction="http://tempuri.org/ISINOStockService/ModifyTrayResponse")]
        System.IAsyncResult BeginModifyTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, ref int Qty, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyTray(ref int Qty, ref string ErrMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISINOStockService/ChangeTryBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ChangeTryBarCodeResponse")]
        bool ChangeTryBarCode(string strBarCode, ref string ErrMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISINOStockService/ChangeTryBarCode", ReplyAction="http://tempuri.org/ISINOStockService/ChangeTryBarCodeResponse")]
        System.IAsyncResult BeginChangeTryBarCode(string strBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeTryBarCode(ref string ErrMsg, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISINOStockServiceChannel : SCG.SINOStock.WCFService.SINOStockService.ISINOStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Account)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Login_ExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Login_ExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Account)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Account[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFormWorkListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFormWorkListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.FormWork[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFormWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFormWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyFormWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyFormWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelFormWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelFormWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProductStrListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProductStrListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFormWorkByProModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFormWorkByProModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Account)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQualityInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQualityInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.QualityInfo[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddQualityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddQualityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyQualityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyQualityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelQualityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelQualityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Role[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Role[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddStockBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddStockBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool IsPrintTray {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockBoxToBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockBoxToBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBoxListByDtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBoxListByDtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxStockBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxStockBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyStockBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyStockBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool IsPrintTray {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxBarCode_ExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxBarCode_ExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxStockBox_ExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxStockBox_ExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeBoxBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeBoxBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeBoxBarCode_ProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeBoxBarCode_ProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyBoxBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyBoxBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStocBoxkEntityByIsUnPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStocBoxkEntityByIsUnPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockDetailListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockDetailListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int CountQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockDetail[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddStockDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddStockDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int QtyCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyStockDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyStockDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteStockDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteStockDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateStockDetailStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateStockDetailStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckStockDetailStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckStockDetailStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckStockDetailStatus_OutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckStockDetailStatus_OutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockDetailByGlassIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockDetailByGlassIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckStockDetail_InCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckStockDetail_InCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckStockDetail_In_ExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckStockDetail_In_ExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelStockDetailAndTuihuoCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelStockDetailAndTuihuoCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotOutEntityByLotNo_OutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotOutEntityByLotNo_OutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork formWork {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(this.results[0]));
            }
        }
        
        public int OutCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLotOut)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotOutEntityByLotNo_Out_NOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotOutEntityByLotNo_Out_NOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork formWork {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(this.results[0]));
            }
        }
        
        public int OutCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLotOut)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EndStockLotOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EndStockLotOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteStockLotOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteStockLotOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNoStockOutGlassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNoStockOutGlassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotOutListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotOutListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int listCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLotOut[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotEntityByLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotEntityByLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public int OperaterQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public int FanGongQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public int HOLDQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot)(this.results[5]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotEntityByLotNo_ExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotEntityByLotNo_ExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public int HOLDQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotEntityListByLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotEntityListByLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddStockLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddStockLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int StockLotID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EndStockLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EndStockLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteStockLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteStockLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotEntityByLotNo_OutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotEntityByLotNo_OutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int OutCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int listCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotList_TwoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotList_TwoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockLot[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HOLDAllToNewStockLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HOLDAllToNewStockLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockOutQtysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockOutQtysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockLotEntityByLotNoTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockLotEntityByLotNoTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public int OperaterQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public int FanGongQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public int HOLDQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockOutDetailListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockOutDetailListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int CountQty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddStockOutDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddStockOutDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int QtyCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockoutDetailByGlassIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockoutDetailByGlassIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyStockOutDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyStockOutDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteStockOutDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteStockOutDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddStockProDicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddStockProDicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProDicByProAndLotIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProDicByProAndLotIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockProDic Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.StockProDic)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string[] Boxs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrayByBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrayByBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ProModel {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Tray)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrayMaxBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrayMaxBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrayListByDtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrayListByDtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Tray[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxTrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxTrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SCG.SINOStock.WCFService.SINOStockService.Tray)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyTrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyTrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Qty {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTryBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeTryBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SINOStockServiceClient : System.ServiceModel.ClientBase<SCG.SINOStock.WCFService.SINOStockService.ISINOStockService>, SCG.SINOStock.WCFService.SINOStockService.ISINOStockService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogin_ExDelegate;
        
        private EndOperationDelegate onEndLogin_ExDelegate;
        
        private System.Threading.SendOrPostCallback onLogin_ExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountListDelegate;
        
        private EndOperationDelegate onEndGetAccountListDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAccountDelegate;
        
        private EndOperationDelegate onEndAddAccountDelegate;
        
        private System.Threading.SendOrPostCallback onAddAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyAccountDelegate;
        
        private EndOperationDelegate onEndModifyAccountDelegate;
        
        private System.Threading.SendOrPostCallback onModifyAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelAccountDelegate;
        
        private EndOperationDelegate onEndDelAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDelAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePwdDelegate;
        
        private EndOperationDelegate onEndChangePwdDelegate;
        
        private System.Threading.SendOrPostCallback onChangePwdCompletedDelegate;
        
        private BeginOperationDelegate onBeginExitCurrentAccountDelegate;
        
        private EndOperationDelegate onEndExitCurrentAccountDelegate;
        
        private System.Threading.SendOrPostCallback onExitCurrentAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFormWorkListDelegate;
        
        private EndOperationDelegate onEndGetFormWorkListDelegate;
        
        private System.Threading.SendOrPostCallback onGetFormWorkListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFormWorkDelegate;
        
        private EndOperationDelegate onEndAddFormWorkDelegate;
        
        private System.Threading.SendOrPostCallback onAddFormWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyFormWorkDelegate;
        
        private EndOperationDelegate onEndModifyFormWorkDelegate;
        
        private System.Threading.SendOrPostCallback onModifyFormWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelFormWorkDelegate;
        
        private EndOperationDelegate onEndDelFormWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDelFormWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProductStrListDelegate;
        
        private EndOperationDelegate onEndGetProductStrListDelegate;
        
        private System.Threading.SendOrPostCallback onGetProductStrListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFormWorkByProModelDelegate;
        
        private EndOperationDelegate onEndGetFormWorkByProModelDelegate;
        
        private System.Threading.SendOrPostCallback onGetFormWorkByProModelCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountByIdDelegate;
        
        private EndOperationDelegate onEndGetAccountByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQualityInfoListDelegate;
        
        private EndOperationDelegate onEndGetQualityInfoListDelegate;
        
        private System.Threading.SendOrPostCallback onGetQualityInfoListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddQualityInfoDelegate;
        
        private EndOperationDelegate onEndAddQualityInfoDelegate;
        
        private System.Threading.SendOrPostCallback onAddQualityInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyQualityInfoDelegate;
        
        private EndOperationDelegate onEndModifyQualityInfoDelegate;
        
        private System.Threading.SendOrPostCallback onModifyQualityInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelQualityInfoDelegate;
        
        private EndOperationDelegate onEndDelQualityInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDelQualityInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoleListDelegate;
        
        private EndOperationDelegate onEndGetRoleListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoleListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRoleDelegate;
        
        private EndOperationDelegate onEndAddRoleDelegate;
        
        private System.Threading.SendOrPostCallback onAddRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyRoleDelegate;
        
        private EndOperationDelegate onEndModifyRoleDelegate;
        
        private System.Threading.SendOrPostCallback onModifyRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelRoleDelegate;
        
        private EndOperationDelegate onEndDelRoleDelegate;
        
        private System.Threading.SendOrPostCallback onDelRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddStockBoxDelegate;
        
        private EndOperationDelegate onEndAddStockBoxDelegate;
        
        private System.Threading.SendOrPostCallback onAddStockBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockBoxToBarCodeDelegate;
        
        private EndOperationDelegate onEndGetStockBoxToBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockBoxToBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxBarCodeDelegate;
        
        private EndOperationDelegate onEndGetMaxBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBoxListByDtDelegate;
        
        private EndOperationDelegate onEndGetBoxListByDtDelegate;
        
        private System.Threading.SendOrPostCallback onGetBoxListByDtCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxStockBoxDelegate;
        
        private EndOperationDelegate onEndGetMaxStockBoxDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxStockBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyStockBoxDelegate;
        
        private EndOperationDelegate onEndModifyStockBoxDelegate;
        
        private System.Threading.SendOrPostCallback onModifyStockBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxBarCode_ExDelegate;
        
        private EndOperationDelegate onEndGetMaxBarCode_ExDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxBarCode_ExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxStockBox_ExDelegate;
        
        private EndOperationDelegate onEndGetMaxStockBox_ExDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxStockBox_ExCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeBoxBarCodeDelegate;
        
        private EndOperationDelegate onEndChangeBoxBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onChangeBoxBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeBoxBarCode_ProDelegate;
        
        private EndOperationDelegate onEndChangeBoxBarCode_ProDelegate;
        
        private System.Threading.SendOrPostCallback onChangeBoxBarCode_ProCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyBoxBarCodeDelegate;
        
        private EndOperationDelegate onEndModifyBoxBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onModifyBoxBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStocBoxkEntityByIsUnPrintDelegate;
        
        private EndOperationDelegate onEndGetStocBoxkEntityByIsUnPrintDelegate;
        
        private System.Threading.SendOrPostCallback onGetStocBoxkEntityByIsUnPrintCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockDetailListDelegate;
        
        private EndOperationDelegate onEndGetStockDetailListDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockDetailListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddStockDetailDelegate;
        
        private EndOperationDelegate onEndAddStockDetailDelegate;
        
        private System.Threading.SendOrPostCallback onAddStockDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyStockDetailDelegate;
        
        private EndOperationDelegate onEndModifyStockDetailDelegate;
        
        private System.Threading.SendOrPostCallback onModifyStockDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteStockDetailDelegate;
        
        private EndOperationDelegate onEndDeleteStockDetailDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteStockDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStockDetailStatusDelegate;
        
        private EndOperationDelegate onEndUpdateStockDetailStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStockDetailStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckStockDetailStatusDelegate;
        
        private EndOperationDelegate onEndCheckStockDetailStatusDelegate;
        
        private System.Threading.SendOrPostCallback onCheckStockDetailStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckStockDetailStatus_OutDelegate;
        
        private EndOperationDelegate onEndCheckStockDetailStatus_OutDelegate;
        
        private System.Threading.SendOrPostCallback onCheckStockDetailStatus_OutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockDetailByGlassIDDelegate;
        
        private EndOperationDelegate onEndGetStockDetailByGlassIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockDetailByGlassIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckStockDetail_InDelegate;
        
        private EndOperationDelegate onEndCheckStockDetail_InDelegate;
        
        private System.Threading.SendOrPostCallback onCheckStockDetail_InCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckStockDetail_In_ExDelegate;
        
        private EndOperationDelegate onEndCheckStockDetail_In_ExDelegate;
        
        private System.Threading.SendOrPostCallback onCheckStockDetail_In_ExCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelStockDetailAndTuihuoCountDelegate;
        
        private EndOperationDelegate onEndDelStockDetailAndTuihuoCountDelegate;
        
        private System.Threading.SendOrPostCallback onDelStockDetailAndTuihuoCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotOutEntityByLotNo_OutDelegate;
        
        private EndOperationDelegate onEndGetStockLotOutEntityByLotNo_OutDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotOutEntityByLotNo_OutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotOutEntityByLotNo_Out_NODelegate;
        
        private EndOperationDelegate onEndGetStockLotOutEntityByLotNo_Out_NODelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotOutEntityByLotNo_Out_NOCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndStockLotOutDelegate;
        
        private EndOperationDelegate onEndEndStockLotOutDelegate;
        
        private System.Threading.SendOrPostCallback onEndStockLotOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteStockLotOutDelegate;
        
        private EndOperationDelegate onEndDeleteStockLotOutDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteStockLotOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckLotNoDelegate;
        
        private EndOperationDelegate onEndCheckLotNoDelegate;
        
        private System.Threading.SendOrPostCallback onCheckLotNoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNoStockOutGlassDelegate;
        
        private EndOperationDelegate onEndGetNoStockOutGlassDelegate;
        
        private System.Threading.SendOrPostCallback onGetNoStockOutGlassCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotOutListDelegate;
        
        private EndOperationDelegate onEndGetStockLotOutListDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotOutListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotEntityByLotNoDelegate;
        
        private EndOperationDelegate onEndGetStockLotEntityByLotNoDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotEntityByLotNoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotEntityByLotNo_ExDelegate;
        
        private EndOperationDelegate onEndGetStockLotEntityByLotNo_ExDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotEntityByLotNo_ExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotEntityListByLotNoDelegate;
        
        private EndOperationDelegate onEndGetStockLotEntityListByLotNoDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotEntityListByLotNoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddStockLotDelegate;
        
        private EndOperationDelegate onEndAddStockLotDelegate;
        
        private System.Threading.SendOrPostCallback onAddStockLotCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndStockLotDelegate;
        
        private EndOperationDelegate onEndEndStockLotDelegate;
        
        private System.Threading.SendOrPostCallback onEndStockLotCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteStockLotDelegate;
        
        private EndOperationDelegate onEndDeleteStockLotDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteStockLotCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotEntityByLotNo_OutDelegate;
        
        private EndOperationDelegate onEndGetStockLotEntityByLotNo_OutDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotEntityByLotNo_OutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotListDelegate;
        
        private EndOperationDelegate onEndGetStockLotListDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotList_TwoDelegate;
        
        private EndOperationDelegate onEndGetStockLotList_TwoDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotList_TwoCompletedDelegate;
        
        private BeginOperationDelegate onBeginHOLDAllToNewStockLotDelegate;
        
        private EndOperationDelegate onEndHOLDAllToNewStockLotDelegate;
        
        private System.Threading.SendOrPostCallback onHOLDAllToNewStockLotCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockOutQtysDelegate;
        
        private EndOperationDelegate onEndGetStockOutQtysDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockOutQtysCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockLotEntityByLotNoTotalDelegate;
        
        private EndOperationDelegate onEndGetStockLotEntityByLotNoTotalDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockLotEntityByLotNoTotalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockOutDetailListDelegate;
        
        private EndOperationDelegate onEndGetStockOutDetailListDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockOutDetailListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddStockOutDetailDelegate;
        
        private EndOperationDelegate onEndAddStockOutDetailDelegate;
        
        private System.Threading.SendOrPostCallback onAddStockOutDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStockoutDetailByGlassIDDelegate;
        
        private EndOperationDelegate onEndGetStockoutDetailByGlassIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockoutDetailByGlassIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyStockOutDetailDelegate;
        
        private EndOperationDelegate onEndModifyStockOutDetailDelegate;
        
        private System.Threading.SendOrPostCallback onModifyStockOutDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteStockOutDetailDelegate;
        
        private EndOperationDelegate onEndDeleteStockOutDetailDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteStockOutDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddStockProDicDelegate;
        
        private EndOperationDelegate onEndAddStockProDicDelegate;
        
        private System.Threading.SendOrPostCallback onAddStockProDicCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProDicByProAndLotIDDelegate;
        
        private EndOperationDelegate onEndGetProDicByProAndLotIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetProDicByProAndLotIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTrayDelegate;
        
        private EndOperationDelegate onEndAddTrayDelegate;
        
        private System.Threading.SendOrPostCallback onAddTrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrayByBarCodeDelegate;
        
        private EndOperationDelegate onEndGetTrayByBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrayByBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrayMaxBarCodeDelegate;
        
        private EndOperationDelegate onEndGetTrayMaxBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrayMaxBarCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrayListByDtDelegate;
        
        private EndOperationDelegate onEndGetTrayListByDtDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrayListByDtCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxTrayDelegate;
        
        private EndOperationDelegate onEndGetMaxTrayDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxTrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyTrayDelegate;
        
        private EndOperationDelegate onEndModifyTrayDelegate;
        
        private System.Threading.SendOrPostCallback onModifyTrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeTryBarCodeDelegate;
        
        private EndOperationDelegate onEndChangeTryBarCodeDelegate;
        
        private System.Threading.SendOrPostCallback onChangeTryBarCodeCompletedDelegate;
        
        public SINOStockServiceClient() {
        }
        
        public SINOStockServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SINOStockServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SINOStockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SINOStockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<Login_ExCompletedEventArgs> Login_ExCompleted;
        
        public event System.EventHandler<GetAccountListCompletedEventArgs> GetAccountListCompleted;
        
        public event System.EventHandler<AddAccountCompletedEventArgs> AddAccountCompleted;
        
        public event System.EventHandler<ModifyAccountCompletedEventArgs> ModifyAccountCompleted;
        
        public event System.EventHandler<DelAccountCompletedEventArgs> DelAccountCompleted;
        
        public event System.EventHandler<ChangePwdCompletedEventArgs> ChangePwdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExitCurrentAccountCompleted;
        
        public event System.EventHandler<GetFormWorkListCompletedEventArgs> GetFormWorkListCompleted;
        
        public event System.EventHandler<AddFormWorkCompletedEventArgs> AddFormWorkCompleted;
        
        public event System.EventHandler<ModifyFormWorkCompletedEventArgs> ModifyFormWorkCompleted;
        
        public event System.EventHandler<DelFormWorkCompletedEventArgs> DelFormWorkCompleted;
        
        public event System.EventHandler<GetProductStrListCompletedEventArgs> GetProductStrListCompleted;
        
        public event System.EventHandler<GetFormWorkByProModelCompletedEventArgs> GetFormWorkByProModelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetAccountByIdCompletedEventArgs> GetAccountByIdCompleted;
        
        public event System.EventHandler<GetQualityInfoListCompletedEventArgs> GetQualityInfoListCompleted;
        
        public event System.EventHandler<AddQualityInfoCompletedEventArgs> AddQualityInfoCompleted;
        
        public event System.EventHandler<ModifyQualityInfoCompletedEventArgs> ModifyQualityInfoCompleted;
        
        public event System.EventHandler<DelQualityInfoCompletedEventArgs> DelQualityInfoCompleted;
        
        public event System.EventHandler<GetRoleListCompletedEventArgs> GetRoleListCompleted;
        
        public event System.EventHandler<AddRoleCompletedEventArgs> AddRoleCompleted;
        
        public event System.EventHandler<ModifyRoleCompletedEventArgs> ModifyRoleCompleted;
        
        public event System.EventHandler<DelRoleCompletedEventArgs> DelRoleCompleted;
        
        public event System.EventHandler<AddStockBoxCompletedEventArgs> AddStockBoxCompleted;
        
        public event System.EventHandler<GetStockBoxToBarCodeCompletedEventArgs> GetStockBoxToBarCodeCompleted;
        
        public event System.EventHandler<GetMaxBarCodeCompletedEventArgs> GetMaxBarCodeCompleted;
        
        public event System.EventHandler<GetBoxListByDtCompletedEventArgs> GetBoxListByDtCompleted;
        
        public event System.EventHandler<GetMaxStockBoxCompletedEventArgs> GetMaxStockBoxCompleted;
        
        public event System.EventHandler<ModifyStockBoxCompletedEventArgs> ModifyStockBoxCompleted;
        
        public event System.EventHandler<GetMaxBarCode_ExCompletedEventArgs> GetMaxBarCode_ExCompleted;
        
        public event System.EventHandler<GetMaxStockBox_ExCompletedEventArgs> GetMaxStockBox_ExCompleted;
        
        public event System.EventHandler<ChangeBoxBarCodeCompletedEventArgs> ChangeBoxBarCodeCompleted;
        
        public event System.EventHandler<ChangeBoxBarCode_ProCompletedEventArgs> ChangeBoxBarCode_ProCompleted;
        
        public event System.EventHandler<ModifyBoxBarCodeCompletedEventArgs> ModifyBoxBarCodeCompleted;
        
        public event System.EventHandler<GetStocBoxkEntityByIsUnPrintCompletedEventArgs> GetStocBoxkEntityByIsUnPrintCompleted;
        
        public event System.EventHandler<GetStockDetailListCompletedEventArgs> GetStockDetailListCompleted;
        
        public event System.EventHandler<AddStockDetailCompletedEventArgs> AddStockDetailCompleted;
        
        public event System.EventHandler<ModifyStockDetailCompletedEventArgs> ModifyStockDetailCompleted;
        
        public event System.EventHandler<DeleteStockDetailCompletedEventArgs> DeleteStockDetailCompleted;
        
        public event System.EventHandler<UpdateStockDetailStatusCompletedEventArgs> UpdateStockDetailStatusCompleted;
        
        public event System.EventHandler<CheckStockDetailStatusCompletedEventArgs> CheckStockDetailStatusCompleted;
        
        public event System.EventHandler<CheckStockDetailStatus_OutCompletedEventArgs> CheckStockDetailStatus_OutCompleted;
        
        public event System.EventHandler<GetStockDetailByGlassIDCompletedEventArgs> GetStockDetailByGlassIDCompleted;
        
        public event System.EventHandler<CheckStockDetail_InCompletedEventArgs> CheckStockDetail_InCompleted;
        
        public event System.EventHandler<CheckStockDetail_In_ExCompletedEventArgs> CheckStockDetail_In_ExCompleted;
        
        public event System.EventHandler<DelStockDetailAndTuihuoCountCompletedEventArgs> DelStockDetailAndTuihuoCountCompleted;
        
        public event System.EventHandler<GetStockLotOutEntityByLotNo_OutCompletedEventArgs> GetStockLotOutEntityByLotNo_OutCompleted;
        
        public event System.EventHandler<GetStockLotOutEntityByLotNo_Out_NOCompletedEventArgs> GetStockLotOutEntityByLotNo_Out_NOCompleted;
        
        public event System.EventHandler<EndStockLotOutCompletedEventArgs> EndStockLotOutCompleted;
        
        public event System.EventHandler<DeleteStockLotOutCompletedEventArgs> DeleteStockLotOutCompleted;
        
        public event System.EventHandler<CheckLotNoCompletedEventArgs> CheckLotNoCompleted;
        
        public event System.EventHandler<GetNoStockOutGlassCompletedEventArgs> GetNoStockOutGlassCompleted;
        
        public event System.EventHandler<GetStockLotOutListCompletedEventArgs> GetStockLotOutListCompleted;
        
        public event System.EventHandler<GetStockLotEntityByLotNoCompletedEventArgs> GetStockLotEntityByLotNoCompleted;
        
        public event System.EventHandler<GetStockLotEntityByLotNo_ExCompletedEventArgs> GetStockLotEntityByLotNo_ExCompleted;
        
        public event System.EventHandler<GetStockLotEntityListByLotNoCompletedEventArgs> GetStockLotEntityListByLotNoCompleted;
        
        public event System.EventHandler<AddStockLotCompletedEventArgs> AddStockLotCompleted;
        
        public event System.EventHandler<EndStockLotCompletedEventArgs> EndStockLotCompleted;
        
        public event System.EventHandler<DeleteStockLotCompletedEventArgs> DeleteStockLotCompleted;
        
        public event System.EventHandler<GetStockLotEntityByLotNo_OutCompletedEventArgs> GetStockLotEntityByLotNo_OutCompleted;
        
        public event System.EventHandler<GetStockLotListCompletedEventArgs> GetStockLotListCompleted;
        
        public event System.EventHandler<GetStockLotList_TwoCompletedEventArgs> GetStockLotList_TwoCompleted;
        
        public event System.EventHandler<HOLDAllToNewStockLotCompletedEventArgs> HOLDAllToNewStockLotCompleted;
        
        public event System.EventHandler<GetStockOutQtysCompletedEventArgs> GetStockOutQtysCompleted;
        
        public event System.EventHandler<GetStockLotEntityByLotNoTotalCompletedEventArgs> GetStockLotEntityByLotNoTotalCompleted;
        
        public event System.EventHandler<GetStockOutDetailListCompletedEventArgs> GetStockOutDetailListCompleted;
        
        public event System.EventHandler<AddStockOutDetailCompletedEventArgs> AddStockOutDetailCompleted;
        
        public event System.EventHandler<GetStockoutDetailByGlassIDCompletedEventArgs> GetStockoutDetailByGlassIDCompleted;
        
        public event System.EventHandler<ModifyStockOutDetailCompletedEventArgs> ModifyStockOutDetailCompleted;
        
        public event System.EventHandler<DeleteStockOutDetailCompletedEventArgs> DeleteStockOutDetailCompleted;
        
        public event System.EventHandler<AddStockProDicCompletedEventArgs> AddStockProDicCompleted;
        
        public event System.EventHandler<GetProDicByProAndLotIDCompletedEventArgs> GetProDicByProAndLotIDCompleted;
        
        public event System.EventHandler<AddTrayCompletedEventArgs> AddTrayCompleted;
        
        public event System.EventHandler<GetTrayByBarCodeCompletedEventArgs> GetTrayByBarCodeCompleted;
        
        public event System.EventHandler<GetTrayMaxBarCodeCompletedEventArgs> GetTrayMaxBarCodeCompleted;
        
        public event System.EventHandler<GetTrayListByDtCompletedEventArgs> GetTrayListByDtCompleted;
        
        public event System.EventHandler<GetMaxTrayCompletedEventArgs> GetMaxTrayCompleted;
        
        public event System.EventHandler<ModifyTrayCompletedEventArgs> ModifyTrayCompleted;
        
        public event System.EventHandler<ChangeTryBarCodeCompletedEventArgs> ChangeTryBarCodeCompleted;
        
        public SCG.SINOStock.WCFService.SINOStockService.Account Login(string strNumber, string strPwd, ref string ErrMsg) {
            return base.Channel.Login(strNumber, strPwd, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string strNumber, string strPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(strNumber, strPwd, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Account EndLogin(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndLogin(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strNumber = ((string)(inValues[0]));
            string strPwd = ((string)(inValues[1]));
            string ErrMsg = ((string)(inValues[2]));
            return this.BeginLogin(strNumber, strPwd, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Account retVal = this.EndLogin(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string strNumber, string strPwd, string ErrMsg) {
            this.LoginAsync(strNumber, strPwd, ErrMsg, null);
        }
        
        public void LoginAsync(string strNumber, string strPwd, string ErrMsg, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        strNumber,
                        strPwd,
                        ErrMsg}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account Login_Ex(string strMACAddress, string strNumber, string strPwd, ref string ErrMsg) {
            return base.Channel.Login_Ex(strMACAddress, strNumber, strPwd, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin_Ex(string strMACAddress, string strNumber, string strPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin_Ex(strMACAddress, strNumber, strPwd, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Account EndLogin_Ex(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndLogin_Ex(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginLogin_Ex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strMACAddress = ((string)(inValues[0]));
            string strNumber = ((string)(inValues[1]));
            string strPwd = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginLogin_Ex(strMACAddress, strNumber, strPwd, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndLogin_Ex(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Account retVal = this.EndLogin_Ex(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnLogin_ExCompleted(object state) {
            if ((this.Login_ExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Login_ExCompleted(this, new Login_ExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Login_ExAsync(string strMACAddress, string strNumber, string strPwd, string ErrMsg) {
            this.Login_ExAsync(strMACAddress, strNumber, strPwd, ErrMsg, null);
        }
        
        public void Login_ExAsync(string strMACAddress, string strNumber, string strPwd, string ErrMsg, object userState) {
            if ((this.onBeginLogin_ExDelegate == null)) {
                this.onBeginLogin_ExDelegate = new BeginOperationDelegate(this.OnBeginLogin_Ex);
            }
            if ((this.onEndLogin_ExDelegate == null)) {
                this.onEndLogin_ExDelegate = new EndOperationDelegate(this.OnEndLogin_Ex);
            }
            if ((this.onLogin_ExCompletedDelegate == null)) {
                this.onLogin_ExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogin_ExCompleted);
            }
            base.InvokeAsync(this.onBeginLogin_ExDelegate, new object[] {
                        strMACAddress,
                        strNumber,
                        strPwd,
                        ErrMsg}, this.onEndLogin_ExDelegate, this.onLogin_ExCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account[] GetAccountList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg) {
            return base.Channel.GetAccountList(checkCode, AccountID, queryList, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Account[] EndGetAccountList(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetAccountList(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetAccountList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetAccountList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetAccountList(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Account[] retVal = this.EndGetAccountList(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetAccountListCompleted(object state) {
            if ((this.GetAccountListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountListCompleted(this, new GetAccountListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg) {
            this.GetAccountListAsync(checkCode, AccountID, queryList, ErrMsg, null);
        }
        
        public void GetAccountListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg, object userState) {
            if ((this.onBeginGetAccountListDelegate == null)) {
                this.onBeginGetAccountListDelegate = new BeginOperationDelegate(this.OnBeginGetAccountList);
            }
            if ((this.onEndGetAccountListDelegate == null)) {
                this.onEndGetAccountListDelegate = new EndOperationDelegate(this.OnEndGetAccountList);
            }
            if ((this.onGetAccountListCompletedDelegate == null)) {
                this.onGetAccountListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountListCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountListDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        ErrMsg}, this.onEndGetAccountListDelegate, this.onGetAccountListCompletedDelegate, userState);
        }
        
        public bool AddAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg) {
            return base.Channel.AddAccount(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddAccount(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddAccount(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Account entity = ((SCG.SINOStock.WCFService.SINOStockService.Account)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginAddAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddAccount(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddAccount(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddAccountCompleted(object state) {
            if ((this.AddAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAccountCompleted(this, new AddAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg) {
            this.AddAccountAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void AddAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg, object userState) {
            if ((this.onBeginAddAccountDelegate == null)) {
                this.onBeginAddAccountDelegate = new BeginOperationDelegate(this.OnBeginAddAccount);
            }
            if ((this.onEndAddAccountDelegate == null)) {
                this.onEndAddAccountDelegate = new EndOperationDelegate(this.OnEndAddAccount);
            }
            if ((this.onAddAccountCompletedDelegate == null)) {
                this.onAddAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAccountCompleted);
            }
            base.InvokeAsync(this.onBeginAddAccountDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndAddAccountDelegate, this.onAddAccountCompletedDelegate, userState);
        }
        
        public bool ModifyAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg) {
            return base.Channel.ModifyAccount(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyAccount(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyAccount(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Account entity = ((SCG.SINOStock.WCFService.SINOStockService.Account)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyAccount(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyAccount(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyAccountCompleted(object state) {
            if ((this.ModifyAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyAccountCompleted(this, new ModifyAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg) {
            this.ModifyAccountAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void ModifyAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyAccountDelegate == null)) {
                this.onBeginModifyAccountDelegate = new BeginOperationDelegate(this.OnBeginModifyAccount);
            }
            if ((this.onEndModifyAccountDelegate == null)) {
                this.onEndModifyAccountDelegate = new EndOperationDelegate(this.OnEndModifyAccount);
            }
            if ((this.onModifyAccountCompletedDelegate == null)) {
                this.onModifyAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyAccountCompleted);
            }
            base.InvokeAsync(this.onBeginModifyAccountDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndModifyAccountDelegate, this.onModifyAccountCompletedDelegate, userState);
        }
        
        public bool DelAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg) {
            return base.Channel.DelAccount(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelAccount(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDelAccount(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDelAccount(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDelAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Account entity = ((SCG.SINOStock.WCFService.SINOStockService.Account)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDelAccount(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDelAccount(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDelAccount(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDelAccountCompleted(object state) {
            if ((this.DelAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelAccountCompleted(this, new DelAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg) {
            this.DelAccountAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void DelAccountAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Account entity, string ErrMsg, object userState) {
            if ((this.onBeginDelAccountDelegate == null)) {
                this.onBeginDelAccountDelegate = new BeginOperationDelegate(this.OnBeginDelAccount);
            }
            if ((this.onEndDelAccountDelegate == null)) {
                this.onEndDelAccountDelegate = new EndOperationDelegate(this.OnEndDelAccount);
            }
            if ((this.onDelAccountCompletedDelegate == null)) {
                this.onDelAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDelAccountDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndDelAccountDelegate, this.onDelAccountCompletedDelegate, userState);
        }
        
        public bool ChangePwd(string checkCode, int AccountID, string OldPwd, string NewPwd, ref string ErrMsg) {
            return base.Channel.ChangePwd(checkCode, AccountID, OldPwd, NewPwd, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangePwd(string checkCode, int AccountID, string OldPwd, string NewPwd, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePwd(checkCode, AccountID, OldPwd, NewPwd, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangePwd(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndChangePwd(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginChangePwd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string OldPwd = ((string)(inValues[2]));
            string NewPwd = ((string)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginChangePwd(checkCode, AccountID, OldPwd, NewPwd, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndChangePwd(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangePwd(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnChangePwdCompleted(object state) {
            if ((this.ChangePwdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePwdCompleted(this, new ChangePwdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePwdAsync(string checkCode, int AccountID, string OldPwd, string NewPwd, string ErrMsg) {
            this.ChangePwdAsync(checkCode, AccountID, OldPwd, NewPwd, ErrMsg, null);
        }
        
        public void ChangePwdAsync(string checkCode, int AccountID, string OldPwd, string NewPwd, string ErrMsg, object userState) {
            if ((this.onBeginChangePwdDelegate == null)) {
                this.onBeginChangePwdDelegate = new BeginOperationDelegate(this.OnBeginChangePwd);
            }
            if ((this.onEndChangePwdDelegate == null)) {
                this.onEndChangePwdDelegate = new EndOperationDelegate(this.OnEndChangePwd);
            }
            if ((this.onChangePwdCompletedDelegate == null)) {
                this.onChangePwdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePwdCompleted);
            }
            base.InvokeAsync(this.onBeginChangePwdDelegate, new object[] {
                        checkCode,
                        AccountID,
                        OldPwd,
                        NewPwd,
                        ErrMsg}, this.onEndChangePwdDelegate, this.onChangePwdCompletedDelegate, userState);
        }
        
        public void ExitCurrentAccount(string checkCode, int AccountID) {
            base.Channel.ExitCurrentAccount(checkCode, AccountID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExitCurrentAccount(string checkCode, int AccountID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExitCurrentAccount(checkCode, AccountID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndExitCurrentAccount(System.IAsyncResult result) {
            base.Channel.EndExitCurrentAccount(result);
        }
        
        private System.IAsyncResult OnBeginExitCurrentAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            return this.BeginExitCurrentAccount(checkCode, AccountID, callback, asyncState);
        }
        
        private object[] OnEndExitCurrentAccount(System.IAsyncResult result) {
            this.EndExitCurrentAccount(result);
            return null;
        }
        
        private void OnExitCurrentAccountCompleted(object state) {
            if ((this.ExitCurrentAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExitCurrentAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExitCurrentAccountAsync(string checkCode, int AccountID) {
            this.ExitCurrentAccountAsync(checkCode, AccountID, null);
        }
        
        public void ExitCurrentAccountAsync(string checkCode, int AccountID, object userState) {
            if ((this.onBeginExitCurrentAccountDelegate == null)) {
                this.onBeginExitCurrentAccountDelegate = new BeginOperationDelegate(this.OnBeginExitCurrentAccount);
            }
            if ((this.onEndExitCurrentAccountDelegate == null)) {
                this.onEndExitCurrentAccountDelegate = new EndOperationDelegate(this.OnEndExitCurrentAccount);
            }
            if ((this.onExitCurrentAccountCompletedDelegate == null)) {
                this.onExitCurrentAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExitCurrentAccountCompleted);
            }
            base.InvokeAsync(this.onBeginExitCurrentAccountDelegate, new object[] {
                        checkCode,
                        AccountID}, this.onEndExitCurrentAccountDelegate, this.onExitCurrentAccountCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork[] GetFormWorkList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg) {
            return base.Channel.GetFormWorkList(checkCode, AccountID, queryList, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFormWorkList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFormWorkList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.FormWork[] EndGetFormWorkList(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetFormWorkList(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetFormWorkList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetFormWorkList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetFormWorkList(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.FormWork[] retVal = this.EndGetFormWorkList(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetFormWorkListCompleted(object state) {
            if ((this.GetFormWorkListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFormWorkListCompleted(this, new GetFormWorkListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFormWorkListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg) {
            this.GetFormWorkListAsync(checkCode, AccountID, queryList, ErrMsg, null);
        }
        
        public void GetFormWorkListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg, object userState) {
            if ((this.onBeginGetFormWorkListDelegate == null)) {
                this.onBeginGetFormWorkListDelegate = new BeginOperationDelegate(this.OnBeginGetFormWorkList);
            }
            if ((this.onEndGetFormWorkListDelegate == null)) {
                this.onEndGetFormWorkListDelegate = new EndOperationDelegate(this.OnEndGetFormWorkList);
            }
            if ((this.onGetFormWorkListCompletedDelegate == null)) {
                this.onGetFormWorkListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFormWorkListCompleted);
            }
            base.InvokeAsync(this.onBeginGetFormWorkListDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        ErrMsg}, this.onEndGetFormWorkListDelegate, this.onGetFormWorkListCompletedDelegate, userState);
        }
        
        public bool AddFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg) {
            return base.Channel.AddFormWork(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddFormWork(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddFormWork(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddFormWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.FormWork entity = ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginAddFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddFormWork(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddFormWork(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddFormWorkCompleted(object state) {
            if ((this.AddFormWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFormWorkCompleted(this, new AddFormWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg) {
            this.AddFormWorkAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void AddFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg, object userState) {
            if ((this.onBeginAddFormWorkDelegate == null)) {
                this.onBeginAddFormWorkDelegate = new BeginOperationDelegate(this.OnBeginAddFormWork);
            }
            if ((this.onEndAddFormWorkDelegate == null)) {
                this.onEndAddFormWorkDelegate = new EndOperationDelegate(this.OnEndAddFormWork);
            }
            if ((this.onAddFormWorkCompletedDelegate == null)) {
                this.onAddFormWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFormWorkCompleted);
            }
            base.InvokeAsync(this.onBeginAddFormWorkDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndAddFormWorkDelegate, this.onAddFormWorkCompletedDelegate, userState);
        }
        
        public bool ModifyFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg) {
            return base.Channel.ModifyFormWork(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyFormWork(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyFormWork(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyFormWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.FormWork entity = ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyFormWork(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyFormWork(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyFormWorkCompleted(object state) {
            if ((this.ModifyFormWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyFormWorkCompleted(this, new ModifyFormWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg) {
            this.ModifyFormWorkAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void ModifyFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyFormWorkDelegate == null)) {
                this.onBeginModifyFormWorkDelegate = new BeginOperationDelegate(this.OnBeginModifyFormWork);
            }
            if ((this.onEndModifyFormWorkDelegate == null)) {
                this.onEndModifyFormWorkDelegate = new EndOperationDelegate(this.OnEndModifyFormWork);
            }
            if ((this.onModifyFormWorkCompletedDelegate == null)) {
                this.onModifyFormWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyFormWorkCompleted);
            }
            base.InvokeAsync(this.onBeginModifyFormWorkDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndModifyFormWorkDelegate, this.onModifyFormWorkCompletedDelegate, userState);
        }
        
        public bool DelFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg) {
            return base.Channel.DelFormWork(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelFormWork(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDelFormWork(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDelFormWork(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDelFormWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.FormWork entity = ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDelFormWork(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDelFormWork(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDelFormWork(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDelFormWorkCompleted(object state) {
            if ((this.DelFormWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelFormWorkCompleted(this, new DelFormWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg) {
            this.DelFormWorkAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void DelFormWorkAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.FormWork entity, string ErrMsg, object userState) {
            if ((this.onBeginDelFormWorkDelegate == null)) {
                this.onBeginDelFormWorkDelegate = new BeginOperationDelegate(this.OnBeginDelFormWork);
            }
            if ((this.onEndDelFormWorkDelegate == null)) {
                this.onEndDelFormWorkDelegate = new EndOperationDelegate(this.OnEndDelFormWork);
            }
            if ((this.onDelFormWorkCompletedDelegate == null)) {
                this.onDelFormWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelFormWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDelFormWorkDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndDelFormWorkDelegate, this.onDelFormWorkCompletedDelegate, userState);
        }
        
        public string[] GetProductStrList() {
            return base.Channel.GetProductStrList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProductStrList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProductStrList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetProductStrList(System.IAsyncResult result) {
            return base.Channel.EndGetProductStrList(result);
        }
        
        private System.IAsyncResult OnBeginGetProductStrList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetProductStrList(callback, asyncState);
        }
        
        private object[] OnEndGetProductStrList(System.IAsyncResult result) {
            string[] retVal = this.EndGetProductStrList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProductStrListCompleted(object state) {
            if ((this.GetProductStrListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProductStrListCompleted(this, new GetProductStrListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProductStrListAsync() {
            this.GetProductStrListAsync(null);
        }
        
        public void GetProductStrListAsync(object userState) {
            if ((this.onBeginGetProductStrListDelegate == null)) {
                this.onBeginGetProductStrListDelegate = new BeginOperationDelegate(this.OnBeginGetProductStrList);
            }
            if ((this.onEndGetProductStrListDelegate == null)) {
                this.onEndGetProductStrListDelegate = new EndOperationDelegate(this.OnEndGetProductStrList);
            }
            if ((this.onGetProductStrListCompletedDelegate == null)) {
                this.onGetProductStrListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProductStrListCompleted);
            }
            base.InvokeAsync(this.onBeginGetProductStrListDelegate, null, this.onEndGetProductStrListDelegate, this.onGetProductStrListCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.FormWork GetFormWorkByProModel(string checkCode, int AccountID, string proModel, ref string ErrMsg) {
            return base.Channel.GetFormWorkByProModel(checkCode, AccountID, proModel, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFormWorkByProModel(string checkCode, int AccountID, string proModel, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFormWorkByProModel(checkCode, AccountID, proModel, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.FormWork EndGetFormWorkByProModel(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetFormWorkByProModel(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetFormWorkByProModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string proModel = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetFormWorkByProModel(checkCode, AccountID, proModel, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetFormWorkByProModel(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.FormWork retVal = this.EndGetFormWorkByProModel(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetFormWorkByProModelCompleted(object state) {
            if ((this.GetFormWorkByProModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFormWorkByProModelCompleted(this, new GetFormWorkByProModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFormWorkByProModelAsync(string checkCode, int AccountID, string proModel, string ErrMsg) {
            this.GetFormWorkByProModelAsync(checkCode, AccountID, proModel, ErrMsg, null);
        }
        
        public void GetFormWorkByProModelAsync(string checkCode, int AccountID, string proModel, string ErrMsg, object userState) {
            if ((this.onBeginGetFormWorkByProModelDelegate == null)) {
                this.onBeginGetFormWorkByProModelDelegate = new BeginOperationDelegate(this.OnBeginGetFormWorkByProModel);
            }
            if ((this.onEndGetFormWorkByProModelDelegate == null)) {
                this.onEndGetFormWorkByProModelDelegate = new EndOperationDelegate(this.OnEndGetFormWorkByProModel);
            }
            if ((this.onGetFormWorkByProModelCompletedDelegate == null)) {
                this.onGetFormWorkByProModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFormWorkByProModelCompleted);
            }
            base.InvokeAsync(this.onBeginGetFormWorkByProModelDelegate, new object[] {
                        checkCode,
                        AccountID,
                        proModel,
                        ErrMsg}, this.onEndGetFormWorkByProModelDelegate, this.onGetFormWorkByProModelCompletedDelegate, userState);
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Account GetAccountById() {
            return base.Channel.GetAccountById();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountById(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountById(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Account EndGetAccountById(System.IAsyncResult result) {
            return base.Channel.EndGetAccountById(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAccountById(callback, asyncState);
        }
        
        private object[] OnEndGetAccountById(System.IAsyncResult result) {
            SCG.SINOStock.WCFService.SINOStockService.Account retVal = this.EndGetAccountById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountByIdCompleted(object state) {
            if ((this.GetAccountByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountByIdCompleted(this, new GetAccountByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountByIdAsync() {
            this.GetAccountByIdAsync(null);
        }
        
        public void GetAccountByIdAsync(object userState) {
            if ((this.onBeginGetAccountByIdDelegate == null)) {
                this.onBeginGetAccountByIdDelegate = new BeginOperationDelegate(this.OnBeginGetAccountById);
            }
            if ((this.onEndGetAccountByIdDelegate == null)) {
                this.onEndGetAccountByIdDelegate = new EndOperationDelegate(this.OnEndGetAccountById);
            }
            if ((this.onGetAccountByIdCompletedDelegate == null)) {
                this.onGetAccountByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountByIdDelegate, null, this.onEndGetAccountByIdDelegate, this.onGetAccountByIdCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] GetQualityInfoList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg) {
            return base.Channel.GetQualityInfoList(checkCode, AccountID, queryList, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQualityInfoList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQualityInfoList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] EndGetQualityInfoList(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetQualityInfoList(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetQualityInfoList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetQualityInfoList(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetQualityInfoList(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.QualityInfo[] retVal = this.EndGetQualityInfoList(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetQualityInfoListCompleted(object state) {
            if ((this.GetQualityInfoListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQualityInfoListCompleted(this, new GetQualityInfoListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQualityInfoListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg) {
            this.GetQualityInfoListAsync(checkCode, AccountID, queryList, ErrMsg, null);
        }
        
        public void GetQualityInfoListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg, object userState) {
            if ((this.onBeginGetQualityInfoListDelegate == null)) {
                this.onBeginGetQualityInfoListDelegate = new BeginOperationDelegate(this.OnBeginGetQualityInfoList);
            }
            if ((this.onEndGetQualityInfoListDelegate == null)) {
                this.onEndGetQualityInfoListDelegate = new EndOperationDelegate(this.OnEndGetQualityInfoList);
            }
            if ((this.onGetQualityInfoListCompletedDelegate == null)) {
                this.onGetQualityInfoListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQualityInfoListCompleted);
            }
            base.InvokeAsync(this.onBeginGetQualityInfoListDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        ErrMsg}, this.onEndGetQualityInfoListDelegate, this.onGetQualityInfoListCompletedDelegate, userState);
        }
        
        public bool AddQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg) {
            return base.Channel.AddQualityInfo(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddQualityInfo(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddQualityInfo(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddQualityInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity = ((SCG.SINOStock.WCFService.SINOStockService.QualityInfo)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginAddQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddQualityInfo(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddQualityInfo(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddQualityInfoCompleted(object state) {
            if ((this.AddQualityInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddQualityInfoCompleted(this, new AddQualityInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg) {
            this.AddQualityInfoAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void AddQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg, object userState) {
            if ((this.onBeginAddQualityInfoDelegate == null)) {
                this.onBeginAddQualityInfoDelegate = new BeginOperationDelegate(this.OnBeginAddQualityInfo);
            }
            if ((this.onEndAddQualityInfoDelegate == null)) {
                this.onEndAddQualityInfoDelegate = new EndOperationDelegate(this.OnEndAddQualityInfo);
            }
            if ((this.onAddQualityInfoCompletedDelegate == null)) {
                this.onAddQualityInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddQualityInfoCompleted);
            }
            base.InvokeAsync(this.onBeginAddQualityInfoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndAddQualityInfoDelegate, this.onAddQualityInfoCompletedDelegate, userState);
        }
        
        public bool ModifyQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg) {
            return base.Channel.ModifyQualityInfo(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyQualityInfo(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyQualityInfo(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyQualityInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity = ((SCG.SINOStock.WCFService.SINOStockService.QualityInfo)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyQualityInfo(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyQualityInfo(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyQualityInfoCompleted(object state) {
            if ((this.ModifyQualityInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyQualityInfoCompleted(this, new ModifyQualityInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg) {
            this.ModifyQualityInfoAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void ModifyQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyQualityInfoDelegate == null)) {
                this.onBeginModifyQualityInfoDelegate = new BeginOperationDelegate(this.OnBeginModifyQualityInfo);
            }
            if ((this.onEndModifyQualityInfoDelegate == null)) {
                this.onEndModifyQualityInfoDelegate = new EndOperationDelegate(this.OnEndModifyQualityInfo);
            }
            if ((this.onModifyQualityInfoCompletedDelegate == null)) {
                this.onModifyQualityInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyQualityInfoCompleted);
            }
            base.InvokeAsync(this.onBeginModifyQualityInfoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndModifyQualityInfoDelegate, this.onModifyQualityInfoCompletedDelegate, userState);
        }
        
        public bool DelQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg) {
            return base.Channel.DelQualityInfo(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelQualityInfo(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDelQualityInfo(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDelQualityInfo(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDelQualityInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity = ((SCG.SINOStock.WCFService.SINOStockService.QualityInfo)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDelQualityInfo(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDelQualityInfo(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDelQualityInfo(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDelQualityInfoCompleted(object state) {
            if ((this.DelQualityInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelQualityInfoCompleted(this, new DelQualityInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg) {
            this.DelQualityInfoAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void DelQualityInfoAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.QualityInfo entity, string ErrMsg, object userState) {
            if ((this.onBeginDelQualityInfoDelegate == null)) {
                this.onBeginDelQualityInfoDelegate = new BeginOperationDelegate(this.OnBeginDelQualityInfo);
            }
            if ((this.onEndDelQualityInfoDelegate == null)) {
                this.onEndDelQualityInfoDelegate = new EndOperationDelegate(this.OnEndDelQualityInfo);
            }
            if ((this.onDelQualityInfoCompletedDelegate == null)) {
                this.onDelQualityInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelQualityInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDelQualityInfoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndDelQualityInfoDelegate, this.onDelQualityInfoCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Role[] GetRoleList(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg) {
            return base.Channel.GetRoleList(checkCode, RoleID, queryList, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRoleList(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoleList(checkCode, RoleID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Role[] EndGetRoleList(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetRoleList(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetRoleList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int RoleID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetRoleList(checkCode, RoleID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetRoleList(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Role[] retVal = this.EndGetRoleList(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetRoleListCompleted(object state) {
            if ((this.GetRoleListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoleListCompleted(this, new GetRoleListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoleListAsync(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg) {
            this.GetRoleListAsync(checkCode, RoleID, queryList, ErrMsg, null);
        }
        
        public void GetRoleListAsync(string checkCode, int RoleID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg, object userState) {
            if ((this.onBeginGetRoleListDelegate == null)) {
                this.onBeginGetRoleListDelegate = new BeginOperationDelegate(this.OnBeginGetRoleList);
            }
            if ((this.onEndGetRoleListDelegate == null)) {
                this.onEndGetRoleListDelegate = new EndOperationDelegate(this.OnEndGetRoleList);
            }
            if ((this.onGetRoleListCompletedDelegate == null)) {
                this.onGetRoleListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoleListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoleListDelegate, new object[] {
                        checkCode,
                        RoleID,
                        queryList,
                        ErrMsg}, this.onEndGetRoleListDelegate, this.onGetRoleListCompletedDelegate, userState);
        }
        
        public bool AddRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg) {
            return base.Channel.AddRole(checkCode, RoleID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddRole(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddRole(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int RoleID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Role entity = ((SCG.SINOStock.WCFService.SINOStockService.Role)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginAddRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddRole(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddRole(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddRoleCompleted(object state) {
            if ((this.AddRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRoleCompleted(this, new AddRoleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg) {
            this.AddRoleAsync(checkCode, RoleID, entity, ErrMsg, null);
        }
        
        public void AddRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg, object userState) {
            if ((this.onBeginAddRoleDelegate == null)) {
                this.onBeginAddRoleDelegate = new BeginOperationDelegate(this.OnBeginAddRole);
            }
            if ((this.onEndAddRoleDelegate == null)) {
                this.onEndAddRoleDelegate = new EndOperationDelegate(this.OnEndAddRole);
            }
            if ((this.onAddRoleCompletedDelegate == null)) {
                this.onAddRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRoleCompleted);
            }
            base.InvokeAsync(this.onBeginAddRoleDelegate, new object[] {
                        checkCode,
                        RoleID,
                        entity,
                        ErrMsg}, this.onEndAddRoleDelegate, this.onAddRoleCompletedDelegate, userState);
        }
        
        public bool ModifyRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg) {
            return base.Channel.ModifyRole(checkCode, RoleID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyRole(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyRole(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int RoleID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Role entity = ((SCG.SINOStock.WCFService.SINOStockService.Role)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyRole(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyRole(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyRoleCompleted(object state) {
            if ((this.ModifyRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyRoleCompleted(this, new ModifyRoleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg) {
            this.ModifyRoleAsync(checkCode, RoleID, entity, ErrMsg, null);
        }
        
        public void ModifyRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyRoleDelegate == null)) {
                this.onBeginModifyRoleDelegate = new BeginOperationDelegate(this.OnBeginModifyRole);
            }
            if ((this.onEndModifyRoleDelegate == null)) {
                this.onEndModifyRoleDelegate = new EndOperationDelegate(this.OnEndModifyRole);
            }
            if ((this.onModifyRoleCompletedDelegate == null)) {
                this.onModifyRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyRoleCompleted);
            }
            base.InvokeAsync(this.onBeginModifyRoleDelegate, new object[] {
                        checkCode,
                        RoleID,
                        entity,
                        ErrMsg}, this.onEndModifyRoleDelegate, this.onModifyRoleCompletedDelegate, userState);
        }
        
        public bool DelRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg) {
            return base.Channel.DelRole(checkCode, RoleID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelRole(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDelRole(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDelRole(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDelRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int RoleID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Role entity = ((SCG.SINOStock.WCFService.SINOStockService.Role)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDelRole(checkCode, RoleID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDelRole(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDelRole(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDelRoleCompleted(object state) {
            if ((this.DelRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelRoleCompleted(this, new DelRoleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg) {
            this.DelRoleAsync(checkCode, RoleID, entity, ErrMsg, null);
        }
        
        public void DelRoleAsync(string checkCode, int RoleID, SCG.SINOStock.WCFService.SINOStockService.Role entity, string ErrMsg, object userState) {
            if ((this.onBeginDelRoleDelegate == null)) {
                this.onBeginDelRoleDelegate = new BeginOperationDelegate(this.OnBeginDelRole);
            }
            if ((this.onEndDelRoleDelegate == null)) {
                this.onEndDelRoleDelegate = new EndOperationDelegate(this.OnEndDelRole);
            }
            if ((this.onDelRoleCompletedDelegate == null)) {
                this.onDelRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelRoleCompleted);
            }
            base.InvokeAsync(this.onBeginDelRoleDelegate, new object[] {
                        checkCode,
                        RoleID,
                        entity,
                        ErrMsg}, this.onEndDelRoleDelegate, this.onDelRoleCompletedDelegate, userState);
        }
        
        public bool AddStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, ref bool IsPrintTray, ref string ErrMsg) {
            return base.Channel.AddStockBox(checkCode, AccountID, entity, sdoIDList, ref IsPrintTray, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, ref bool IsPrintTray, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddStockBox(checkCode, AccountID, entity, sdoIDList, ref IsPrintTray, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddStockBox(ref bool IsPrintTray, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddStockBox(ref IsPrintTray, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddStockBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockBox entity = ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(inValues[2]));
            int[] sdoIDList = ((int[])(inValues[3]));
            bool IsPrintTray = ((bool)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginAddStockBox(checkCode, AccountID, entity, sdoIDList, ref IsPrintTray, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddStockBox(System.IAsyncResult result) {
            bool IsPrintTray = this.GetDefaultValueForInitialization<bool>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddStockBox(ref IsPrintTray, ref ErrMsg, result);
            return new object[] {
                    IsPrintTray,
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddStockBoxCompleted(object state) {
            if ((this.AddStockBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddStockBoxCompleted(this, new AddStockBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddStockBoxAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, bool IsPrintTray, string ErrMsg) {
            this.AddStockBoxAsync(checkCode, AccountID, entity, sdoIDList, IsPrintTray, ErrMsg, null);
        }
        
        public void AddStockBoxAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, bool IsPrintTray, string ErrMsg, object userState) {
            if ((this.onBeginAddStockBoxDelegate == null)) {
                this.onBeginAddStockBoxDelegate = new BeginOperationDelegate(this.OnBeginAddStockBox);
            }
            if ((this.onEndAddStockBoxDelegate == null)) {
                this.onEndAddStockBoxDelegate = new EndOperationDelegate(this.OnEndAddStockBox);
            }
            if ((this.onAddStockBoxCompletedDelegate == null)) {
                this.onAddStockBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddStockBoxCompleted);
            }
            base.InvokeAsync(this.onBeginAddStockBoxDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        sdoIDList,
                        IsPrintTray,
                        ErrMsg}, this.onEndAddStockBoxDelegate, this.onAddStockBoxCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox GetStockBoxToBarCode(string checkCode, int AccountID, string BarCode, ref string ErrMsg) {
            return base.Channel.GetStockBoxToBarCode(checkCode, AccountID, BarCode, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockBoxToBarCode(string checkCode, int AccountID, string BarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockBoxToBarCode(checkCode, AccountID, BarCode, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetStockBoxToBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockBoxToBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockBoxToBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string BarCode = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetStockBoxToBarCode(checkCode, AccountID, BarCode, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockBoxToBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndGetStockBoxToBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockBoxToBarCodeCompleted(object state) {
            if ((this.GetStockBoxToBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockBoxToBarCodeCompleted(this, new GetStockBoxToBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockBoxToBarCodeAsync(string checkCode, int AccountID, string BarCode, string ErrMsg) {
            this.GetStockBoxToBarCodeAsync(checkCode, AccountID, BarCode, ErrMsg, null);
        }
        
        public void GetStockBoxToBarCodeAsync(string checkCode, int AccountID, string BarCode, string ErrMsg, object userState) {
            if ((this.onBeginGetStockBoxToBarCodeDelegate == null)) {
                this.onBeginGetStockBoxToBarCodeDelegate = new BeginOperationDelegate(this.OnBeginGetStockBoxToBarCode);
            }
            if ((this.onEndGetStockBoxToBarCodeDelegate == null)) {
                this.onEndGetStockBoxToBarCodeDelegate = new EndOperationDelegate(this.OnEndGetStockBoxToBarCode);
            }
            if ((this.onGetStockBoxToBarCodeCompletedDelegate == null)) {
                this.onGetStockBoxToBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockBoxToBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockBoxToBarCodeDelegate, new object[] {
                        checkCode,
                        AccountID,
                        BarCode,
                        ErrMsg}, this.onEndGetStockBoxToBarCodeDelegate, this.onGetStockBoxToBarCodeCompletedDelegate, userState);
        }
        
        public string GetMaxBarCode(string checkCode, int AccountID, int LotID, ref string ErrMsg) {
            return base.Channel.GetMaxBarCode(checkCode, AccountID, LotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxBarCode(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxBarCode(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMaxBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetMaxBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetMaxBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int LotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetMaxBarCode(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetMaxBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetMaxBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetMaxBarCodeCompleted(object state) {
            if ((this.GetMaxBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxBarCodeCompleted(this, new GetMaxBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxBarCodeAsync(string checkCode, int AccountID, int LotID, string ErrMsg) {
            this.GetMaxBarCodeAsync(checkCode, AccountID, LotID, ErrMsg, null);
        }
        
        public void GetMaxBarCodeAsync(string checkCode, int AccountID, int LotID, string ErrMsg, object userState) {
            if ((this.onBeginGetMaxBarCodeDelegate == null)) {
                this.onBeginGetMaxBarCodeDelegate = new BeginOperationDelegate(this.OnBeginGetMaxBarCode);
            }
            if ((this.onEndGetMaxBarCodeDelegate == null)) {
                this.onEndGetMaxBarCodeDelegate = new EndOperationDelegate(this.OnEndGetMaxBarCode);
            }
            if ((this.onGetMaxBarCodeCompletedDelegate == null)) {
                this.onGetMaxBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxBarCodeDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotID,
                        ErrMsg}, this.onEndGetMaxBarCodeDelegate, this.onGetMaxBarCodeCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox[] GetBoxListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg) {
            return base.Channel.GetBoxListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBoxListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBoxListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox[] EndGetBoxListByDt(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetBoxListByDt(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetBoxListByDt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.DateTime StartDt = ((System.DateTime)(inValues[2]));
            System.DateTime EndDt = ((System.DateTime)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginGetBoxListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetBoxListByDt(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox[] retVal = this.EndGetBoxListByDt(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetBoxListByDtCompleted(object state) {
            if ((this.GetBoxListByDtCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBoxListByDtCompleted(this, new GetBoxListByDtCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBoxListByDtAsync(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, string ErrMsg) {
            this.GetBoxListByDtAsync(checkCode, AccountID, StartDt, EndDt, ErrMsg, null);
        }
        
        public void GetBoxListByDtAsync(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, string ErrMsg, object userState) {
            if ((this.onBeginGetBoxListByDtDelegate == null)) {
                this.onBeginGetBoxListByDtDelegate = new BeginOperationDelegate(this.OnBeginGetBoxListByDt);
            }
            if ((this.onEndGetBoxListByDtDelegate == null)) {
                this.onEndGetBoxListByDtDelegate = new EndOperationDelegate(this.OnEndGetBoxListByDt);
            }
            if ((this.onGetBoxListByDtCompletedDelegate == null)) {
                this.onGetBoxListByDtCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBoxListByDtCompleted);
            }
            base.InvokeAsync(this.onBeginGetBoxListByDtDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StartDt,
                        EndDt,
                        ErrMsg}, this.onEndGetBoxListByDtDelegate, this.onGetBoxListByDtCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox GetMaxStockBox(string checkCode, int AccountID, int LotID, ref string ErrMsg) {
            return base.Channel.GetMaxStockBox(checkCode, AccountID, LotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxStockBox(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxStockBox(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetMaxStockBox(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetMaxStockBox(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetMaxStockBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int LotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetMaxStockBox(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetMaxStockBox(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndGetMaxStockBox(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetMaxStockBoxCompleted(object state) {
            if ((this.GetMaxStockBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxStockBoxCompleted(this, new GetMaxStockBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxStockBoxAsync(string checkCode, int AccountID, int LotID, string ErrMsg) {
            this.GetMaxStockBoxAsync(checkCode, AccountID, LotID, ErrMsg, null);
        }
        
        public void GetMaxStockBoxAsync(string checkCode, int AccountID, int LotID, string ErrMsg, object userState) {
            if ((this.onBeginGetMaxStockBoxDelegate == null)) {
                this.onBeginGetMaxStockBoxDelegate = new BeginOperationDelegate(this.OnBeginGetMaxStockBox);
            }
            if ((this.onEndGetMaxStockBoxDelegate == null)) {
                this.onEndGetMaxStockBoxDelegate = new EndOperationDelegate(this.OnEndGetMaxStockBox);
            }
            if ((this.onGetMaxStockBoxCompletedDelegate == null)) {
                this.onGetMaxStockBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxStockBoxCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxStockBoxDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotID,
                        ErrMsg}, this.onEndGetMaxStockBoxDelegate, this.onGetMaxStockBoxCompletedDelegate, userState);
        }
        
        public bool ModifyStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, ref bool IsPrintTray, ref string ErrMsg) {
            return base.Channel.ModifyStockBox(checkCode, AccountID, entity, sdoIDList, stockLotIDs, ref IsPrintTray, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyStockBox(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, ref bool IsPrintTray, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyStockBox(checkCode, AccountID, entity, sdoIDList, stockLotIDs, ref IsPrintTray, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyStockBox(ref bool IsPrintTray, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyStockBox(ref IsPrintTray, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyStockBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockBox entity = ((SCG.SINOStock.WCFService.SINOStockService.StockBox)(inValues[2]));
            int[] sdoIDList = ((int[])(inValues[3]));
            int[] stockLotIDs = ((int[])(inValues[4]));
            bool IsPrintTray = ((bool)(inValues[5]));
            string ErrMsg = ((string)(inValues[6]));
            return this.BeginModifyStockBox(checkCode, AccountID, entity, sdoIDList, stockLotIDs, ref IsPrintTray, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyStockBox(System.IAsyncResult result) {
            bool IsPrintTray = this.GetDefaultValueForInitialization<bool>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyStockBox(ref IsPrintTray, ref ErrMsg, result);
            return new object[] {
                    IsPrintTray,
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyStockBoxCompleted(object state) {
            if ((this.ModifyStockBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyStockBoxCompleted(this, new ModifyStockBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyStockBoxAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, bool IsPrintTray, string ErrMsg) {
            this.ModifyStockBoxAsync(checkCode, AccountID, entity, sdoIDList, stockLotIDs, IsPrintTray, ErrMsg, null);
        }
        
        public void ModifyStockBoxAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockBox entity, int[] sdoIDList, int[] stockLotIDs, bool IsPrintTray, string ErrMsg, object userState) {
            if ((this.onBeginModifyStockBoxDelegate == null)) {
                this.onBeginModifyStockBoxDelegate = new BeginOperationDelegate(this.OnBeginModifyStockBox);
            }
            if ((this.onEndModifyStockBoxDelegate == null)) {
                this.onEndModifyStockBoxDelegate = new EndOperationDelegate(this.OnEndModifyStockBox);
            }
            if ((this.onModifyStockBoxCompletedDelegate == null)) {
                this.onModifyStockBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyStockBoxCompleted);
            }
            base.InvokeAsync(this.onBeginModifyStockBoxDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        sdoIDList,
                        stockLotIDs,
                        IsPrintTray,
                        ErrMsg}, this.onEndModifyStockBoxDelegate, this.onModifyStockBoxCompletedDelegate, userState);
        }
        
        public string GetMaxBarCode_Ex(string checkCode, int AccountID, ref string ErrMsg) {
            return base.Channel.GetMaxBarCode_Ex(checkCode, AccountID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxBarCode_Ex(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxBarCode_Ex(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMaxBarCode_Ex(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetMaxBarCode_Ex(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetMaxBarCode_Ex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string ErrMsg = ((string)(inValues[2]));
            return this.BeginGetMaxBarCode_Ex(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetMaxBarCode_Ex(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetMaxBarCode_Ex(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetMaxBarCode_ExCompleted(object state) {
            if ((this.GetMaxBarCode_ExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxBarCode_ExCompleted(this, new GetMaxBarCode_ExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxBarCode_ExAsync(string checkCode, int AccountID, string ErrMsg) {
            this.GetMaxBarCode_ExAsync(checkCode, AccountID, ErrMsg, null);
        }
        
        public void GetMaxBarCode_ExAsync(string checkCode, int AccountID, string ErrMsg, object userState) {
            if ((this.onBeginGetMaxBarCode_ExDelegate == null)) {
                this.onBeginGetMaxBarCode_ExDelegate = new BeginOperationDelegate(this.OnBeginGetMaxBarCode_Ex);
            }
            if ((this.onEndGetMaxBarCode_ExDelegate == null)) {
                this.onEndGetMaxBarCode_ExDelegate = new EndOperationDelegate(this.OnEndGetMaxBarCode_Ex);
            }
            if ((this.onGetMaxBarCode_ExCompletedDelegate == null)) {
                this.onGetMaxBarCode_ExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxBarCode_ExCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxBarCode_ExDelegate, new object[] {
                        checkCode,
                        AccountID,
                        ErrMsg}, this.onEndGetMaxBarCode_ExDelegate, this.onGetMaxBarCode_ExCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox GetMaxStockBox_Ex(string checkCode, int AccountID, ref string ErrMsg) {
            return base.Channel.GetMaxStockBox_Ex(checkCode, AccountID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxStockBox_Ex(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxStockBox_Ex(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetMaxStockBox_Ex(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetMaxStockBox_Ex(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetMaxStockBox_Ex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string ErrMsg = ((string)(inValues[2]));
            return this.BeginGetMaxStockBox_Ex(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetMaxStockBox_Ex(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndGetMaxStockBox_Ex(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetMaxStockBox_ExCompleted(object state) {
            if ((this.GetMaxStockBox_ExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxStockBox_ExCompleted(this, new GetMaxStockBox_ExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxStockBox_ExAsync(string checkCode, int AccountID, string ErrMsg) {
            this.GetMaxStockBox_ExAsync(checkCode, AccountID, ErrMsg, null);
        }
        
        public void GetMaxStockBox_ExAsync(string checkCode, int AccountID, string ErrMsg, object userState) {
            if ((this.onBeginGetMaxStockBox_ExDelegate == null)) {
                this.onBeginGetMaxStockBox_ExDelegate = new BeginOperationDelegate(this.OnBeginGetMaxStockBox_Ex);
            }
            if ((this.onEndGetMaxStockBox_ExDelegate == null)) {
                this.onEndGetMaxStockBox_ExDelegate = new EndOperationDelegate(this.OnEndGetMaxStockBox_Ex);
            }
            if ((this.onGetMaxStockBox_ExCompletedDelegate == null)) {
                this.onGetMaxStockBox_ExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxStockBox_ExCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxStockBox_ExDelegate, new object[] {
                        checkCode,
                        AccountID,
                        ErrMsg}, this.onEndGetMaxStockBox_ExDelegate, this.onGetMaxStockBox_ExCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox ChangeBoxBarCode(string strBarCode, ref string ErrMsg) {
            return base.Channel.ChangeBoxBarCode(strBarCode, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeBoxBarCode(string strBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeBoxBarCode(strBarCode, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndChangeBoxBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndChangeBoxBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginChangeBoxBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strBarCode = ((string)(inValues[0]));
            string ErrMsg = ((string)(inValues[1]));
            return this.BeginChangeBoxBarCode(strBarCode, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndChangeBoxBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndChangeBoxBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnChangeBoxBarCodeCompleted(object state) {
            if ((this.ChangeBoxBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeBoxBarCodeCompleted(this, new ChangeBoxBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeBoxBarCodeAsync(string strBarCode, string ErrMsg) {
            this.ChangeBoxBarCodeAsync(strBarCode, ErrMsg, null);
        }
        
        public void ChangeBoxBarCodeAsync(string strBarCode, string ErrMsg, object userState) {
            if ((this.onBeginChangeBoxBarCodeDelegate == null)) {
                this.onBeginChangeBoxBarCodeDelegate = new BeginOperationDelegate(this.OnBeginChangeBoxBarCode);
            }
            if ((this.onEndChangeBoxBarCodeDelegate == null)) {
                this.onEndChangeBoxBarCodeDelegate = new EndOperationDelegate(this.OnEndChangeBoxBarCode);
            }
            if ((this.onChangeBoxBarCodeCompletedDelegate == null)) {
                this.onChangeBoxBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeBoxBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginChangeBoxBarCodeDelegate, new object[] {
                        strBarCode,
                        ErrMsg}, this.onEndChangeBoxBarCodeDelegate, this.onChangeBoxBarCodeCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox ChangeBoxBarCode_Pro(string strNewBarCode, string strOldBarCode, int AccountID, ref string ErrMsg) {
            return base.Channel.ChangeBoxBarCode_Pro(strNewBarCode, strOldBarCode, AccountID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeBoxBarCode_Pro(string strNewBarCode, string strOldBarCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeBoxBarCode_Pro(strNewBarCode, strOldBarCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndChangeBoxBarCode_Pro(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndChangeBoxBarCode_Pro(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginChangeBoxBarCode_Pro(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strNewBarCode = ((string)(inValues[0]));
            string strOldBarCode = ((string)(inValues[1]));
            int AccountID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginChangeBoxBarCode_Pro(strNewBarCode, strOldBarCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndChangeBoxBarCode_Pro(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndChangeBoxBarCode_Pro(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnChangeBoxBarCode_ProCompleted(object state) {
            if ((this.ChangeBoxBarCode_ProCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeBoxBarCode_ProCompleted(this, new ChangeBoxBarCode_ProCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeBoxBarCode_ProAsync(string strNewBarCode, string strOldBarCode, int AccountID, string ErrMsg) {
            this.ChangeBoxBarCode_ProAsync(strNewBarCode, strOldBarCode, AccountID, ErrMsg, null);
        }
        
        public void ChangeBoxBarCode_ProAsync(string strNewBarCode, string strOldBarCode, int AccountID, string ErrMsg, object userState) {
            if ((this.onBeginChangeBoxBarCode_ProDelegate == null)) {
                this.onBeginChangeBoxBarCode_ProDelegate = new BeginOperationDelegate(this.OnBeginChangeBoxBarCode_Pro);
            }
            if ((this.onEndChangeBoxBarCode_ProDelegate == null)) {
                this.onEndChangeBoxBarCode_ProDelegate = new EndOperationDelegate(this.OnEndChangeBoxBarCode_Pro);
            }
            if ((this.onChangeBoxBarCode_ProCompletedDelegate == null)) {
                this.onChangeBoxBarCode_ProCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeBoxBarCode_ProCompleted);
            }
            base.InvokeAsync(this.onBeginChangeBoxBarCode_ProDelegate, new object[] {
                        strNewBarCode,
                        strOldBarCode,
                        AccountID,
                        ErrMsg}, this.onEndChangeBoxBarCode_ProDelegate, this.onChangeBoxBarCode_ProCompletedDelegate, userState);
        }
        
        public bool ModifyBoxBarCode(string checkCode, int AccountID, string OldBarCode, string NewBarCode, ref string ErrMsg) {
            return base.Channel.ModifyBoxBarCode(checkCode, AccountID, OldBarCode, NewBarCode, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyBoxBarCode(string checkCode, int AccountID, string OldBarCode, string NewBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyBoxBarCode(checkCode, AccountID, OldBarCode, NewBarCode, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyBoxBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyBoxBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyBoxBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string OldBarCode = ((string)(inValues[2]));
            string NewBarCode = ((string)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginModifyBoxBarCode(checkCode, AccountID, OldBarCode, NewBarCode, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyBoxBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyBoxBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyBoxBarCodeCompleted(object state) {
            if ((this.ModifyBoxBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyBoxBarCodeCompleted(this, new ModifyBoxBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyBoxBarCodeAsync(string checkCode, int AccountID, string OldBarCode, string NewBarCode, string ErrMsg) {
            this.ModifyBoxBarCodeAsync(checkCode, AccountID, OldBarCode, NewBarCode, ErrMsg, null);
        }
        
        public void ModifyBoxBarCodeAsync(string checkCode, int AccountID, string OldBarCode, string NewBarCode, string ErrMsg, object userState) {
            if ((this.onBeginModifyBoxBarCodeDelegate == null)) {
                this.onBeginModifyBoxBarCodeDelegate = new BeginOperationDelegate(this.OnBeginModifyBoxBarCode);
            }
            if ((this.onEndModifyBoxBarCodeDelegate == null)) {
                this.onEndModifyBoxBarCodeDelegate = new EndOperationDelegate(this.OnEndModifyBoxBarCode);
            }
            if ((this.onModifyBoxBarCodeCompletedDelegate == null)) {
                this.onModifyBoxBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyBoxBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginModifyBoxBarCodeDelegate, new object[] {
                        checkCode,
                        AccountID,
                        OldBarCode,
                        NewBarCode,
                        ErrMsg}, this.onEndModifyBoxBarCodeDelegate, this.onModifyBoxBarCodeCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockBox GetStocBoxkEntityByIsUnPrint(string checkCode, int AccountID, ref string ErrMsg) {
            return base.Channel.GetStocBoxkEntityByIsUnPrint(checkCode, AccountID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStocBoxkEntityByIsUnPrint(string checkCode, int AccountID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStocBoxkEntityByIsUnPrint(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockBox EndGetStocBoxkEntityByIsUnPrint(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStocBoxkEntityByIsUnPrint(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStocBoxkEntityByIsUnPrint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string ErrMsg = ((string)(inValues[2]));
            return this.BeginGetStocBoxkEntityByIsUnPrint(checkCode, AccountID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStocBoxkEntityByIsUnPrint(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockBox retVal = this.EndGetStocBoxkEntityByIsUnPrint(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStocBoxkEntityByIsUnPrintCompleted(object state) {
            if ((this.GetStocBoxkEntityByIsUnPrintCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStocBoxkEntityByIsUnPrintCompleted(this, new GetStocBoxkEntityByIsUnPrintCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStocBoxkEntityByIsUnPrintAsync(string checkCode, int AccountID, string ErrMsg) {
            this.GetStocBoxkEntityByIsUnPrintAsync(checkCode, AccountID, ErrMsg, null);
        }
        
        public void GetStocBoxkEntityByIsUnPrintAsync(string checkCode, int AccountID, string ErrMsg, object userState) {
            if ((this.onBeginGetStocBoxkEntityByIsUnPrintDelegate == null)) {
                this.onBeginGetStocBoxkEntityByIsUnPrintDelegate = new BeginOperationDelegate(this.OnBeginGetStocBoxkEntityByIsUnPrint);
            }
            if ((this.onEndGetStocBoxkEntityByIsUnPrintDelegate == null)) {
                this.onEndGetStocBoxkEntityByIsUnPrintDelegate = new EndOperationDelegate(this.OnEndGetStocBoxkEntityByIsUnPrint);
            }
            if ((this.onGetStocBoxkEntityByIsUnPrintCompletedDelegate == null)) {
                this.onGetStocBoxkEntityByIsUnPrintCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStocBoxkEntityByIsUnPrintCompleted);
            }
            base.InvokeAsync(this.onBeginGetStocBoxkEntityByIsUnPrintDelegate, new object[] {
                        checkCode,
                        AccountID,
                        ErrMsg}, this.onEndGetStocBoxkEntityByIsUnPrintDelegate, this.onGetStocBoxkEntityByIsUnPrintCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail[] GetStockDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg) {
            return base.Channel.GetStockDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail[] EndGetStockDetailList(ref int CountQty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockDetailList(ref CountQty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockDetailList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int cAccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            int AccountID = ((int)(inValues[3]));
            int CountQty = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginGetStockDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockDetailList(System.IAsyncResult result) {
            int CountQty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockDetail[] retVal = this.EndGetStockDetailList(ref CountQty, ref ErrMsg, result);
            return new object[] {
                    CountQty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockDetailListCompleted(object state) {
            if ((this.GetStockDetailListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockDetailListCompleted(this, new GetStockDetailListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockDetailListAsync(string checkCode, int cAccountID, int StockLotID, int AccountID, int CountQty, string ErrMsg) {
            this.GetStockDetailListAsync(checkCode, cAccountID, StockLotID, AccountID, CountQty, ErrMsg, null);
        }
        
        public void GetStockDetailListAsync(string checkCode, int cAccountID, int StockLotID, int AccountID, int CountQty, string ErrMsg, object userState) {
            if ((this.onBeginGetStockDetailListDelegate == null)) {
                this.onBeginGetStockDetailListDelegate = new BeginOperationDelegate(this.OnBeginGetStockDetailList);
            }
            if ((this.onEndGetStockDetailListDelegate == null)) {
                this.onEndGetStockDetailListDelegate = new EndOperationDelegate(this.OnEndGetStockDetailList);
            }
            if ((this.onGetStockDetailListCompletedDelegate == null)) {
                this.onGetStockDetailListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockDetailListCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockDetailListDelegate, new object[] {
                        checkCode,
                        cAccountID,
                        StockLotID,
                        AccountID,
                        CountQty,
                        ErrMsg}, this.onEndGetStockDetailListDelegate, this.onGetStockDetailListCompletedDelegate, userState);
        }
        
        public bool AddStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, ref int QtyCount, ref string ErrMsg) {
            return base.Channel.AddStockDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, ref int QtyCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddStockDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddStockDetail(ref int QtyCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddStockDetail(ref QtyCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddStockDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(inValues[2]));
            bool IsCheck = ((bool)(inValues[3]));
            int QtyCount = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginAddStockDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddStockDetail(System.IAsyncResult result) {
            int QtyCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddStockDetail(ref QtyCount, ref ErrMsg, result);
            return new object[] {
                    QtyCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddStockDetailCompleted(object state) {
            if ((this.AddStockDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddStockDetailCompleted(this, new AddStockDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, int QtyCount, string ErrMsg) {
            this.AddStockDetailAsync(checkCode, AccountID, entity, IsCheck, QtyCount, ErrMsg, null);
        }
        
        public void AddStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, bool IsCheck, int QtyCount, string ErrMsg, object userState) {
            if ((this.onBeginAddStockDetailDelegate == null)) {
                this.onBeginAddStockDetailDelegate = new BeginOperationDelegate(this.OnBeginAddStockDetail);
            }
            if ((this.onEndAddStockDetailDelegate == null)) {
                this.onEndAddStockDetailDelegate = new EndOperationDelegate(this.OnEndAddStockDetail);
            }
            if ((this.onAddStockDetailCompletedDelegate == null)) {
                this.onAddStockDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddStockDetailCompleted);
            }
            base.InvokeAsync(this.onBeginAddStockDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        IsCheck,
                        QtyCount,
                        ErrMsg}, this.onEndAddStockDetailDelegate, this.onAddStockDetailCompletedDelegate, userState);
        }
        
        public bool ModifyStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg) {
            return base.Channel.ModifyStockDetail(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyStockDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyStockDetail(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyStockDetail(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyStockDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyStockDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyStockDetail(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyStockDetail(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyStockDetailCompleted(object state) {
            if ((this.ModifyStockDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyStockDetailCompleted(this, new ModifyStockDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, string ErrMsg) {
            this.ModifyStockDetailAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void ModifyStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyStockDetailDelegate == null)) {
                this.onBeginModifyStockDetailDelegate = new BeginOperationDelegate(this.OnBeginModifyStockDetail);
            }
            if ((this.onEndModifyStockDetailDelegate == null)) {
                this.onEndModifyStockDetailDelegate = new EndOperationDelegate(this.OnEndModifyStockDetail);
            }
            if ((this.onModifyStockDetailCompletedDelegate == null)) {
                this.onModifyStockDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyStockDetailCompleted);
            }
            base.InvokeAsync(this.onBeginModifyStockDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndModifyStockDetailDelegate, this.onModifyStockDetailCompletedDelegate, userState);
        }
        
        public bool DeleteStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg) {
            return base.Channel.DeleteStockDetail(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteStockDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteStockDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteStockDetail(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteStockDetail(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteStockDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockDetail)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDeleteStockDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteStockDetail(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteStockDetail(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDeleteStockDetailCompleted(object state) {
            if ((this.DeleteStockDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteStockDetailCompleted(this, new DeleteStockDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, string ErrMsg) {
            this.DeleteStockDetailAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void DeleteStockDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockDetail entity, string ErrMsg, object userState) {
            if ((this.onBeginDeleteStockDetailDelegate == null)) {
                this.onBeginDeleteStockDetailDelegate = new BeginOperationDelegate(this.OnBeginDeleteStockDetail);
            }
            if ((this.onEndDeleteStockDetailDelegate == null)) {
                this.onEndDeleteStockDetailDelegate = new EndOperationDelegate(this.OnEndDeleteStockDetail);
            }
            if ((this.onDeleteStockDetailCompletedDelegate == null)) {
                this.onDeleteStockDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteStockDetailCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteStockDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndDeleteStockDetailDelegate, this.onDeleteStockDetailCompletedDelegate, userState);
        }
        
        public bool UpdateStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg) {
            return base.Channel.UpdateStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateStockDetailStatus(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndUpdateStockDetailStatus(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginUpdateStockDetailStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            int strLotID = ((int)(inValues[3]));
            int iStatus = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginUpdateStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndUpdateStockDetailStatus(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndUpdateStockDetailStatus(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnUpdateStockDetailStatusCompleted(object state) {
            if ((this.UpdateStockDetailStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStockDetailStatusCompleted(this, new UpdateStockDetailStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStockDetailStatusAsync(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, string ErrMsg) {
            this.UpdateStockDetailStatusAsync(checkCode, AccountID, strGlassID, strLotID, iStatus, ErrMsg, null);
        }
        
        public void UpdateStockDetailStatusAsync(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, string ErrMsg, object userState) {
            if ((this.onBeginUpdateStockDetailStatusDelegate == null)) {
                this.onBeginUpdateStockDetailStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateStockDetailStatus);
            }
            if ((this.onEndUpdateStockDetailStatusDelegate == null)) {
                this.onEndUpdateStockDetailStatusDelegate = new EndOperationDelegate(this.OnEndUpdateStockDetailStatus);
            }
            if ((this.onUpdateStockDetailStatusCompletedDelegate == null)) {
                this.onUpdateStockDetailStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStockDetailStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStockDetailStatusDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        strLotID,
                        iStatus,
                        ErrMsg}, this.onEndUpdateStockDetailStatusDelegate, this.onUpdateStockDetailStatusCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail CheckStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg) {
            return base.Channel.CheckStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckStockDetailStatus(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail EndCheckStockDetailStatus(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndCheckStockDetailStatus(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginCheckStockDetailStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            int strLotID = ((int)(inValues[3]));
            int iStatus = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginCheckStockDetailStatus(checkCode, AccountID, strGlassID, strLotID, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndCheckStockDetailStatus(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockDetail retVal = this.EndCheckStockDetailStatus(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnCheckStockDetailStatusCompleted(object state) {
            if ((this.CheckStockDetailStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckStockDetailStatusCompleted(this, new CheckStockDetailStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckStockDetailStatusAsync(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, string ErrMsg) {
            this.CheckStockDetailStatusAsync(checkCode, AccountID, strGlassID, strLotID, iStatus, ErrMsg, null);
        }
        
        public void CheckStockDetailStatusAsync(string checkCode, int AccountID, string strGlassID, int strLotID, int iStatus, string ErrMsg, object userState) {
            if ((this.onBeginCheckStockDetailStatusDelegate == null)) {
                this.onBeginCheckStockDetailStatusDelegate = new BeginOperationDelegate(this.OnBeginCheckStockDetailStatus);
            }
            if ((this.onEndCheckStockDetailStatusDelegate == null)) {
                this.onEndCheckStockDetailStatusDelegate = new EndOperationDelegate(this.OnEndCheckStockDetailStatus);
            }
            if ((this.onCheckStockDetailStatusCompletedDelegate == null)) {
                this.onCheckStockDetailStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckStockDetailStatusCompleted);
            }
            base.InvokeAsync(this.onBeginCheckStockDetailStatusDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        strLotID,
                        iStatus,
                        ErrMsg}, this.onEndCheckStockDetailStatusDelegate, this.onCheckStockDetailStatusCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail CheckStockDetailStatus_Out(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, ref string ErrMsg) {
            return base.Channel.CheckStockDetailStatus_Out(checkCode, AccountID, strGlassID, strLotIDs, iStatus, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckStockDetailStatus_Out(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckStockDetailStatus_Out(checkCode, AccountID, strGlassID, strLotIDs, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail EndCheckStockDetailStatus_Out(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndCheckStockDetailStatus_Out(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginCheckStockDetailStatus_Out(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            int[] strLotIDs = ((int[])(inValues[3]));
            int iStatus = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginCheckStockDetailStatus_Out(checkCode, AccountID, strGlassID, strLotIDs, iStatus, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndCheckStockDetailStatus_Out(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockDetail retVal = this.EndCheckStockDetailStatus_Out(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnCheckStockDetailStatus_OutCompleted(object state) {
            if ((this.CheckStockDetailStatus_OutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckStockDetailStatus_OutCompleted(this, new CheckStockDetailStatus_OutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckStockDetailStatus_OutAsync(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, string ErrMsg) {
            this.CheckStockDetailStatus_OutAsync(checkCode, AccountID, strGlassID, strLotIDs, iStatus, ErrMsg, null);
        }
        
        public void CheckStockDetailStatus_OutAsync(string checkCode, int AccountID, string strGlassID, int[] strLotIDs, int iStatus, string ErrMsg, object userState) {
            if ((this.onBeginCheckStockDetailStatus_OutDelegate == null)) {
                this.onBeginCheckStockDetailStatus_OutDelegate = new BeginOperationDelegate(this.OnBeginCheckStockDetailStatus_Out);
            }
            if ((this.onEndCheckStockDetailStatus_OutDelegate == null)) {
                this.onEndCheckStockDetailStatus_OutDelegate = new EndOperationDelegate(this.OnEndCheckStockDetailStatus_Out);
            }
            if ((this.onCheckStockDetailStatus_OutCompletedDelegate == null)) {
                this.onCheckStockDetailStatus_OutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckStockDetailStatus_OutCompleted);
            }
            base.InvokeAsync(this.onBeginCheckStockDetailStatus_OutDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        strLotIDs,
                        iStatus,
                        ErrMsg}, this.onEndCheckStockDetailStatus_OutDelegate, this.onCheckStockDetailStatus_OutCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail GetStockDetailByGlassID(string checkCode, int AccountID, string GlassID, ref string ErrMsg) {
            return base.Channel.GetStockDetailByGlassID(checkCode, AccountID, GlassID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockDetailByGlassID(string checkCode, int AccountID, string GlassID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockDetailByGlassID(checkCode, AccountID, GlassID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockDetail EndGetStockDetailByGlassID(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockDetailByGlassID(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockDetailByGlassID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string GlassID = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetStockDetailByGlassID(checkCode, AccountID, GlassID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockDetailByGlassID(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockDetail retVal = this.EndGetStockDetailByGlassID(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockDetailByGlassIDCompleted(object state) {
            if ((this.GetStockDetailByGlassIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockDetailByGlassIDCompleted(this, new GetStockDetailByGlassIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockDetailByGlassIDAsync(string checkCode, int AccountID, string GlassID, string ErrMsg) {
            this.GetStockDetailByGlassIDAsync(checkCode, AccountID, GlassID, ErrMsg, null);
        }
        
        public void GetStockDetailByGlassIDAsync(string checkCode, int AccountID, string GlassID, string ErrMsg, object userState) {
            if ((this.onBeginGetStockDetailByGlassIDDelegate == null)) {
                this.onBeginGetStockDetailByGlassIDDelegate = new BeginOperationDelegate(this.OnBeginGetStockDetailByGlassID);
            }
            if ((this.onEndGetStockDetailByGlassIDDelegate == null)) {
                this.onEndGetStockDetailByGlassIDDelegate = new EndOperationDelegate(this.OnEndGetStockDetailByGlassID);
            }
            if ((this.onGetStockDetailByGlassIDCompletedDelegate == null)) {
                this.onGetStockDetailByGlassIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockDetailByGlassIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockDetailByGlassIDDelegate, new object[] {
                        checkCode,
                        AccountID,
                        GlassID,
                        ErrMsg}, this.onEndGetStockDetailByGlassIDDelegate, this.onGetStockDetailByGlassIDCompletedDelegate, userState);
        }
        
        public bool CheckStockDetail_In(string checkCode, int AccountID, string strGlassID, int strLotID, ref string ErrMsg) {
            return base.Channel.CheckStockDetail_In(checkCode, AccountID, strGlassID, strLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckStockDetail_In(string checkCode, int AccountID, string strGlassID, int strLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckStockDetail_In(checkCode, AccountID, strGlassID, strLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckStockDetail_In(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndCheckStockDetail_In(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginCheckStockDetail_In(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            int strLotID = ((int)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginCheckStockDetail_In(checkCode, AccountID, strGlassID, strLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndCheckStockDetail_In(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckStockDetail_In(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnCheckStockDetail_InCompleted(object state) {
            if ((this.CheckStockDetail_InCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckStockDetail_InCompleted(this, new CheckStockDetail_InCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckStockDetail_InAsync(string checkCode, int AccountID, string strGlassID, int strLotID, string ErrMsg) {
            this.CheckStockDetail_InAsync(checkCode, AccountID, strGlassID, strLotID, ErrMsg, null);
        }
        
        public void CheckStockDetail_InAsync(string checkCode, int AccountID, string strGlassID, int strLotID, string ErrMsg, object userState) {
            if ((this.onBeginCheckStockDetail_InDelegate == null)) {
                this.onBeginCheckStockDetail_InDelegate = new BeginOperationDelegate(this.OnBeginCheckStockDetail_In);
            }
            if ((this.onEndCheckStockDetail_InDelegate == null)) {
                this.onEndCheckStockDetail_InDelegate = new EndOperationDelegate(this.OnEndCheckStockDetail_In);
            }
            if ((this.onCheckStockDetail_InCompletedDelegate == null)) {
                this.onCheckStockDetail_InCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckStockDetail_InCompleted);
            }
            base.InvokeAsync(this.onBeginCheckStockDetail_InDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        strLotID,
                        ErrMsg}, this.onEndCheckStockDetail_InDelegate, this.onCheckStockDetail_InCompletedDelegate, userState);
        }
        
        public bool CheckStockDetail_In_Ex(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, ref string ErrMsg) {
            return base.Channel.CheckStockDetail_In_Ex(checkCode, AccountID, strGlassID, strLotID, isCheck, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckStockDetail_In_Ex(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckStockDetail_In_Ex(checkCode, AccountID, strGlassID, strLotID, isCheck, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckStockDetail_In_Ex(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndCheckStockDetail_In_Ex(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginCheckStockDetail_In_Ex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            int strLotID = ((int)(inValues[3]));
            bool isCheck = ((bool)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginCheckStockDetail_In_Ex(checkCode, AccountID, strGlassID, strLotID, isCheck, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndCheckStockDetail_In_Ex(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckStockDetail_In_Ex(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnCheckStockDetail_In_ExCompleted(object state) {
            if ((this.CheckStockDetail_In_ExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckStockDetail_In_ExCompleted(this, new CheckStockDetail_In_ExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckStockDetail_In_ExAsync(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, string ErrMsg) {
            this.CheckStockDetail_In_ExAsync(checkCode, AccountID, strGlassID, strLotID, isCheck, ErrMsg, null);
        }
        
        public void CheckStockDetail_In_ExAsync(string checkCode, int AccountID, string strGlassID, int strLotID, bool isCheck, string ErrMsg, object userState) {
            if ((this.onBeginCheckStockDetail_In_ExDelegate == null)) {
                this.onBeginCheckStockDetail_In_ExDelegate = new BeginOperationDelegate(this.OnBeginCheckStockDetail_In_Ex);
            }
            if ((this.onEndCheckStockDetail_In_ExDelegate == null)) {
                this.onEndCheckStockDetail_In_ExDelegate = new EndOperationDelegate(this.OnEndCheckStockDetail_In_Ex);
            }
            if ((this.onCheckStockDetail_In_ExCompletedDelegate == null)) {
                this.onCheckStockDetail_In_ExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckStockDetail_In_ExCompleted);
            }
            base.InvokeAsync(this.onBeginCheckStockDetail_In_ExDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        strLotID,
                        isCheck,
                        ErrMsg}, this.onEndCheckStockDetail_In_ExDelegate, this.onCheckStockDetail_In_ExCompletedDelegate, userState);
        }
        
        public bool DelStockDetailAndTuihuoCount(string checkCode, int AccountID, int StockDetailID, ref string ErrMsg) {
            return base.Channel.DelStockDetailAndTuihuoCount(checkCode, AccountID, StockDetailID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelStockDetailAndTuihuoCount(string checkCode, int AccountID, int StockDetailID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelStockDetailAndTuihuoCount(checkCode, AccountID, StockDetailID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDelStockDetailAndTuihuoCount(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDelStockDetailAndTuihuoCount(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDelStockDetailAndTuihuoCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockDetailID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDelStockDetailAndTuihuoCount(checkCode, AccountID, StockDetailID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDelStockDetailAndTuihuoCount(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDelStockDetailAndTuihuoCount(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDelStockDetailAndTuihuoCountCompleted(object state) {
            if ((this.DelStockDetailAndTuihuoCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelStockDetailAndTuihuoCountCompleted(this, new DelStockDetailAndTuihuoCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelStockDetailAndTuihuoCountAsync(string checkCode, int AccountID, int StockDetailID, string ErrMsg) {
            this.DelStockDetailAndTuihuoCountAsync(checkCode, AccountID, StockDetailID, ErrMsg, null);
        }
        
        public void DelStockDetailAndTuihuoCountAsync(string checkCode, int AccountID, int StockDetailID, string ErrMsg, object userState) {
            if ((this.onBeginDelStockDetailAndTuihuoCountDelegate == null)) {
                this.onBeginDelStockDetailAndTuihuoCountDelegate = new BeginOperationDelegate(this.OnBeginDelStockDetailAndTuihuoCount);
            }
            if ((this.onEndDelStockDetailAndTuihuoCountDelegate == null)) {
                this.onEndDelStockDetailAndTuihuoCountDelegate = new EndOperationDelegate(this.OnEndDelStockDetailAndTuihuoCount);
            }
            if ((this.onDelStockDetailAndTuihuoCountCompletedDelegate == null)) {
                this.onDelStockDetailAndTuihuoCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelStockDetailAndTuihuoCountCompleted);
            }
            base.InvokeAsync(this.onBeginDelStockDetailAndTuihuoCountDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockDetailID,
                        ErrMsg}, this.onEndDelStockDetailAndTuihuoCountDelegate, this.onDelStockDetailAndTuihuoCountCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut GetStockLotOutEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg) {
            return base.Channel.GetStockLotOutEntityByLotNo_Out(checkCode, AccountID, LotNo, ref formWork, ref OutCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotOutEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotOutEntityByLotNo_Out(checkCode, AccountID, LotNo, ref formWork, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut EndGetStockLotOutEntityByLotNo_Out(ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotOutEntityByLotNo_Out(ref formWork, ref OutCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotOutEntityByLotNo_Out(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            SCG.SINOStock.WCFService.SINOStockService.FormWork formWork = ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(inValues[3]));
            int OutCount = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginGetStockLotOutEntityByLotNo_Out(checkCode, AccountID, LotNo, ref formWork, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotOutEntityByLotNo_Out(System.IAsyncResult result) {
            SCG.SINOStock.WCFService.SINOStockService.FormWork formWork = this.GetDefaultValueForInitialization<SCG.SINOStock.WCFService.SINOStockService.FormWork>();
            int OutCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLotOut retVal = this.EndGetStockLotOutEntityByLotNo_Out(ref formWork, ref OutCount, ref ErrMsg, result);
            return new object[] {
                    formWork,
                    OutCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotOutEntityByLotNo_OutCompleted(object state) {
            if ((this.GetStockLotOutEntityByLotNo_OutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotOutEntityByLotNo_OutCompleted(this, new GetStockLotOutEntityByLotNo_OutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotOutEntityByLotNo_OutAsync(string checkCode, int AccountID, string LotNo, SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, int OutCount, string ErrMsg) {
            this.GetStockLotOutEntityByLotNo_OutAsync(checkCode, AccountID, LotNo, formWork, OutCount, ErrMsg, null);
        }
        
        public void GetStockLotOutEntityByLotNo_OutAsync(string checkCode, int AccountID, string LotNo, SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, int OutCount, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotOutEntityByLotNo_OutDelegate == null)) {
                this.onBeginGetStockLotOutEntityByLotNo_OutDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotOutEntityByLotNo_Out);
            }
            if ((this.onEndGetStockLotOutEntityByLotNo_OutDelegate == null)) {
                this.onEndGetStockLotOutEntityByLotNo_OutDelegate = new EndOperationDelegate(this.OnEndGetStockLotOutEntityByLotNo_Out);
            }
            if ((this.onGetStockLotOutEntityByLotNo_OutCompletedDelegate == null)) {
                this.onGetStockLotOutEntityByLotNo_OutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotOutEntityByLotNo_OutCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotOutEntityByLotNo_OutDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        formWork,
                        OutCount,
                        ErrMsg}, this.onEndGetStockLotOutEntityByLotNo_OutDelegate, this.onGetStockLotOutEntityByLotNo_OutCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut GetStockLotOutEntityByLotNo_Out_NO(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg) {
            return base.Channel.GetStockLotOutEntityByLotNo_Out_NO(checkCode, AccountID, LotNo, Qty, ProModel, ref formWork, ref OutCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotOutEntityByLotNo_Out_NO(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotOutEntityByLotNo_Out_NO(checkCode, AccountID, LotNo, Qty, ProModel, ref formWork, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut EndGetStockLotOutEntityByLotNo_Out_NO(ref SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, ref int OutCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotOutEntityByLotNo_Out_NO(ref formWork, ref OutCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotOutEntityByLotNo_Out_NO(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            int Qty = ((int)(inValues[3]));
            string ProModel = ((string)(inValues[4]));
            SCG.SINOStock.WCFService.SINOStockService.FormWork formWork = ((SCG.SINOStock.WCFService.SINOStockService.FormWork)(inValues[5]));
            int OutCount = ((int)(inValues[6]));
            string ErrMsg = ((string)(inValues[7]));
            return this.BeginGetStockLotOutEntityByLotNo_Out_NO(checkCode, AccountID, LotNo, Qty, ProModel, ref formWork, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotOutEntityByLotNo_Out_NO(System.IAsyncResult result) {
            SCG.SINOStock.WCFService.SINOStockService.FormWork formWork = this.GetDefaultValueForInitialization<SCG.SINOStock.WCFService.SINOStockService.FormWork>();
            int OutCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLotOut retVal = this.EndGetStockLotOutEntityByLotNo_Out_NO(ref formWork, ref OutCount, ref ErrMsg, result);
            return new object[] {
                    formWork,
                    OutCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotOutEntityByLotNo_Out_NOCompleted(object state) {
            if ((this.GetStockLotOutEntityByLotNo_Out_NOCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotOutEntityByLotNo_Out_NOCompleted(this, new GetStockLotOutEntityByLotNo_Out_NOCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotOutEntityByLotNo_Out_NOAsync(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, int OutCount, string ErrMsg) {
            this.GetStockLotOutEntityByLotNo_Out_NOAsync(checkCode, AccountID, LotNo, Qty, ProModel, formWork, OutCount, ErrMsg, null);
        }
        
        public void GetStockLotOutEntityByLotNo_Out_NOAsync(string checkCode, int AccountID, string LotNo, int Qty, string ProModel, SCG.SINOStock.WCFService.SINOStockService.FormWork formWork, int OutCount, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotOutEntityByLotNo_Out_NODelegate == null)) {
                this.onBeginGetStockLotOutEntityByLotNo_Out_NODelegate = new BeginOperationDelegate(this.OnBeginGetStockLotOutEntityByLotNo_Out_NO);
            }
            if ((this.onEndGetStockLotOutEntityByLotNo_Out_NODelegate == null)) {
                this.onEndGetStockLotOutEntityByLotNo_Out_NODelegate = new EndOperationDelegate(this.OnEndGetStockLotOutEntityByLotNo_Out_NO);
            }
            if ((this.onGetStockLotOutEntityByLotNo_Out_NOCompletedDelegate == null)) {
                this.onGetStockLotOutEntityByLotNo_Out_NOCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotOutEntityByLotNo_Out_NOCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotOutEntityByLotNo_Out_NODelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        Qty,
                        ProModel,
                        formWork,
                        OutCount,
                        ErrMsg}, this.onEndGetStockLotOutEntityByLotNo_Out_NODelegate, this.onGetStockLotOutEntityByLotNo_Out_NOCompletedDelegate, userState);
        }
        
        public bool EndStockLotOut(string checkCode, int AccountID, int StockLotID, ref string ErrMsg) {
            return base.Channel.EndStockLotOut(checkCode, AccountID, StockLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEndStockLotOut(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEndStockLotOut(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEndStockLotOut(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndEndStockLotOut(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginEndStockLotOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginEndStockLotOut(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndEndStockLotOut(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndEndStockLotOut(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnEndStockLotOutCompleted(object state) {
            if ((this.EndStockLotOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndStockLotOutCompleted(this, new EndStockLotOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndStockLotOutAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg) {
            this.EndStockLotOutAsync(checkCode, AccountID, StockLotID, ErrMsg, null);
        }
        
        public void EndStockLotOutAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg, object userState) {
            if ((this.onBeginEndStockLotOutDelegate == null)) {
                this.onBeginEndStockLotOutDelegate = new BeginOperationDelegate(this.OnBeginEndStockLotOut);
            }
            if ((this.onEndEndStockLotOutDelegate == null)) {
                this.onEndEndStockLotOutDelegate = new EndOperationDelegate(this.OnEndEndStockLotOut);
            }
            if ((this.onEndStockLotOutCompletedDelegate == null)) {
                this.onEndStockLotOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndStockLotOutCompleted);
            }
            base.InvokeAsync(this.onBeginEndStockLotOutDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockLotID,
                        ErrMsg}, this.onEndEndStockLotOutDelegate, this.onEndStockLotOutCompletedDelegate, userState);
        }
        
        public bool DeleteStockLotOut(string checkCode, int AccountID, int StockLotOutID, ref string ErrMsg) {
            return base.Channel.DeleteStockLotOut(checkCode, AccountID, StockLotOutID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteStockLotOut(string checkCode, int AccountID, int StockLotOutID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteStockLotOut(checkCode, AccountID, StockLotOutID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteStockLotOut(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteStockLotOut(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteStockLotOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockLotOutID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDeleteStockLotOut(checkCode, AccountID, StockLotOutID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteStockLotOut(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteStockLotOut(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDeleteStockLotOutCompleted(object state) {
            if ((this.DeleteStockLotOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteStockLotOutCompleted(this, new DeleteStockLotOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteStockLotOutAsync(string checkCode, int AccountID, int StockLotOutID, string ErrMsg) {
            this.DeleteStockLotOutAsync(checkCode, AccountID, StockLotOutID, ErrMsg, null);
        }
        
        public void DeleteStockLotOutAsync(string checkCode, int AccountID, int StockLotOutID, string ErrMsg, object userState) {
            if ((this.onBeginDeleteStockLotOutDelegate == null)) {
                this.onBeginDeleteStockLotOutDelegate = new BeginOperationDelegate(this.OnBeginDeleteStockLotOut);
            }
            if ((this.onEndDeleteStockLotOutDelegate == null)) {
                this.onEndDeleteStockLotOutDelegate = new EndOperationDelegate(this.OnEndDeleteStockLotOut);
            }
            if ((this.onDeleteStockLotOutCompletedDelegate == null)) {
                this.onDeleteStockLotOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteStockLotOutCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteStockLotOutDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockLotOutID,
                        ErrMsg}, this.onEndDeleteStockLotOutDelegate, this.onDeleteStockLotOutCompletedDelegate, userState);
        }
        
        public bool CheckLotNo(string checkCode, int AccountID, string LotNo, ref string ErrMsg) {
            return base.Channel.CheckLotNo(checkCode, AccountID, LotNo, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckLotNo(string checkCode, int AccountID, string LotNo, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckLotNo(checkCode, AccountID, LotNo, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckLotNo(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndCheckLotNo(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginCheckLotNo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginCheckLotNo(checkCode, AccountID, LotNo, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndCheckLotNo(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckLotNo(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnCheckLotNoCompleted(object state) {
            if ((this.CheckLotNoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckLotNoCompleted(this, new CheckLotNoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckLotNoAsync(string checkCode, int AccountID, string LotNo, string ErrMsg) {
            this.CheckLotNoAsync(checkCode, AccountID, LotNo, ErrMsg, null);
        }
        
        public void CheckLotNoAsync(string checkCode, int AccountID, string LotNo, string ErrMsg, object userState) {
            if ((this.onBeginCheckLotNoDelegate == null)) {
                this.onBeginCheckLotNoDelegate = new BeginOperationDelegate(this.OnBeginCheckLotNo);
            }
            if ((this.onEndCheckLotNoDelegate == null)) {
                this.onEndCheckLotNoDelegate = new EndOperationDelegate(this.OnEndCheckLotNo);
            }
            if ((this.onCheckLotNoCompletedDelegate == null)) {
                this.onCheckLotNoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckLotNoCompleted);
            }
            base.InvokeAsync(this.onBeginCheckLotNoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        ErrMsg}, this.onEndCheckLotNoDelegate, this.onCheckLotNoCompletedDelegate, userState);
        }
        
        public string[] GetNoStockOutGlass(string checkCode, int AccountID, string LotNo, ref string ErrMsg) {
            return base.Channel.GetNoStockOutGlass(checkCode, AccountID, LotNo, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNoStockOutGlass(string checkCode, int AccountID, string LotNo, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNoStockOutGlass(checkCode, AccountID, LotNo, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetNoStockOutGlass(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetNoStockOutGlass(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetNoStockOutGlass(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetNoStockOutGlass(checkCode, AccountID, LotNo, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetNoStockOutGlass(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            string[] retVal = this.EndGetNoStockOutGlass(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetNoStockOutGlassCompleted(object state) {
            if ((this.GetNoStockOutGlassCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNoStockOutGlassCompleted(this, new GetNoStockOutGlassCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNoStockOutGlassAsync(string checkCode, int AccountID, string LotNo, string ErrMsg) {
            this.GetNoStockOutGlassAsync(checkCode, AccountID, LotNo, ErrMsg, null);
        }
        
        public void GetNoStockOutGlassAsync(string checkCode, int AccountID, string LotNo, string ErrMsg, object userState) {
            if ((this.onBeginGetNoStockOutGlassDelegate == null)) {
                this.onBeginGetNoStockOutGlassDelegate = new BeginOperationDelegate(this.OnBeginGetNoStockOutGlass);
            }
            if ((this.onEndGetNoStockOutGlassDelegate == null)) {
                this.onEndGetNoStockOutGlassDelegate = new EndOperationDelegate(this.OnEndGetNoStockOutGlass);
            }
            if ((this.onGetNoStockOutGlassCompletedDelegate == null)) {
                this.onGetNoStockOutGlassCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNoStockOutGlassCompleted);
            }
            base.InvokeAsync(this.onBeginGetNoStockOutGlassDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        ErrMsg}, this.onEndGetNoStockOutGlassDelegate, this.onGetNoStockOutGlassCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] GetStockLotOutList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg) {
            return base.Channel.GetStockLotOutList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotOutList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotOutList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] EndGetStockLotOutList(ref int listCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotOutList(ref listCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotOutList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            int PageCount = ((int)(inValues[3]));
            int PageIndex = ((int)(inValues[4]));
            int listCount = ((int)(inValues[5]));
            string ErrMsg = ((string)(inValues[6]));
            return this.BeginGetStockLotOutList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotOutList(System.IAsyncResult result) {
            int listCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLotOut[] retVal = this.EndGetStockLotOutList(ref listCount, ref ErrMsg, result);
            return new object[] {
                    listCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotOutListCompleted(object state) {
            if ((this.GetStockLotOutListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotOutListCompleted(this, new GetStockLotOutListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotOutListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, int listCount, string ErrMsg) {
            this.GetStockLotOutListAsync(checkCode, AccountID, queryList, PageCount, PageIndex, listCount, ErrMsg, null);
        }
        
        public void GetStockLotOutListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, int listCount, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotOutListDelegate == null)) {
                this.onBeginGetStockLotOutListDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotOutList);
            }
            if ((this.onEndGetStockLotOutListDelegate == null)) {
                this.onEndGetStockLotOutListDelegate = new EndOperationDelegate(this.OnEndGetStockLotOutList);
            }
            if ((this.onGetStockLotOutListCompletedDelegate == null)) {
                this.onGetStockLotOutListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotOutListCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotOutListDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        PageCount,
                        PageIndex,
                        listCount,
                        ErrMsg}, this.onEndGetStockLotOutListDelegate, this.onGetStockLotOutListCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg) {
            return base.Channel.GetStockLotEntityByLotNo(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotEntityByLotNo(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotEntityByLotNo(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo(ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotEntityByLotNo(ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotEntityByLotNo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            int iStatus = ((int)(inValues[3]));
            bool isShowAllDetail = ((bool)(inValues[4]));
            int Qty = ((int)(inValues[5]));
            int OperaterQty = ((int)(inValues[6]));
            int FanGongQty = ((int)(inValues[7]));
            int HOLDQty = ((int)(inValues[8]));
            string ErrMsg = ((string)(inValues[9]));
            return this.BeginGetStockLotEntityByLotNo(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotEntityByLotNo(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            int OperaterQty = this.GetDefaultValueForInitialization<int>();
            int FanGongQty = this.GetDefaultValueForInitialization<int>();
            int HOLDQty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot retVal = this.EndGetStockLotEntityByLotNo(ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    OperaterQty,
                    FanGongQty,
                    HOLDQty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotEntityByLotNoCompleted(object state) {
            if ((this.GetStockLotEntityByLotNoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotEntityByLotNoCompleted(this, new GetStockLotEntityByLotNoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotEntityByLotNoAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int OperaterQty, int FanGongQty, int HOLDQty, string ErrMsg) {
            this.GetStockLotEntityByLotNoAsync(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, Qty, OperaterQty, FanGongQty, HOLDQty, ErrMsg, null);
        }
        
        public void GetStockLotEntityByLotNoAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int OperaterQty, int FanGongQty, int HOLDQty, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotEntityByLotNoDelegate == null)) {
                this.onBeginGetStockLotEntityByLotNoDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotEntityByLotNo);
            }
            if ((this.onEndGetStockLotEntityByLotNoDelegate == null)) {
                this.onEndGetStockLotEntityByLotNoDelegate = new EndOperationDelegate(this.OnEndGetStockLotEntityByLotNo);
            }
            if ((this.onGetStockLotEntityByLotNoCompletedDelegate == null)) {
                this.onGetStockLotEntityByLotNoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotEntityByLotNoCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotEntityByLotNoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        iStatus,
                        isShowAllDetail,
                        Qty,
                        OperaterQty,
                        FanGongQty,
                        HOLDQty,
                        ErrMsg}, this.onEndGetStockLotEntityByLotNoDelegate, this.onGetStockLotEntityByLotNoCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo_Ex(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int HOLDQty, ref string ErrMsg) {
            return base.Channel.GetStockLotEntityByLotNo_Ex(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref HOLDQty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotEntityByLotNo_Ex(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotEntityByLotNo_Ex(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo_Ex(ref int Qty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotEntityByLotNo_Ex(ref Qty, ref HOLDQty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotEntityByLotNo_Ex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            int iStatus = ((int)(inValues[3]));
            bool isShowAllDetail = ((bool)(inValues[4]));
            int Qty = ((int)(inValues[5]));
            int HOLDQty = ((int)(inValues[6]));
            string ErrMsg = ((string)(inValues[7]));
            return this.BeginGetStockLotEntityByLotNo_Ex(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotEntityByLotNo_Ex(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            int HOLDQty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot retVal = this.EndGetStockLotEntityByLotNo_Ex(ref Qty, ref HOLDQty, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    HOLDQty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotEntityByLotNo_ExCompleted(object state) {
            if ((this.GetStockLotEntityByLotNo_ExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotEntityByLotNo_ExCompleted(this, new GetStockLotEntityByLotNo_ExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotEntityByLotNo_ExAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int HOLDQty, string ErrMsg) {
            this.GetStockLotEntityByLotNo_ExAsync(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, Qty, HOLDQty, ErrMsg, null);
        }
        
        public void GetStockLotEntityByLotNo_ExAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int HOLDQty, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotEntityByLotNo_ExDelegate == null)) {
                this.onBeginGetStockLotEntityByLotNo_ExDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotEntityByLotNo_Ex);
            }
            if ((this.onEndGetStockLotEntityByLotNo_ExDelegate == null)) {
                this.onEndGetStockLotEntityByLotNo_ExDelegate = new EndOperationDelegate(this.OnEndGetStockLotEntityByLotNo_Ex);
            }
            if ((this.onGetStockLotEntityByLotNo_ExCompletedDelegate == null)) {
                this.onGetStockLotEntityByLotNo_ExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotEntityByLotNo_ExCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotEntityByLotNo_ExDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        iStatus,
                        isShowAllDetail,
                        Qty,
                        HOLDQty,
                        ErrMsg}, this.onEndGetStockLotEntityByLotNo_ExDelegate, this.onGetStockLotEntityByLotNo_ExCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotEntityListByLotNo(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, ref string ErrMsg) {
            return base.Channel.GetStockLotEntityListByLotNo(checkCode, AccountID, LotID, iStatus, isShowAllDetail, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotEntityListByLotNo(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotEntityListByLotNo(checkCode, AccountID, LotID, iStatus, isShowAllDetail, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotEntityListByLotNo(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotEntityListByLotNo(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotEntityListByLotNo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int[] LotID = ((int[])(inValues[2]));
            int iStatus = ((int)(inValues[3]));
            bool isShowAllDetail = ((bool)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginGetStockLotEntityListByLotNo(checkCode, AccountID, LotID, iStatus, isShowAllDetail, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotEntityListByLotNo(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot[] retVal = this.EndGetStockLotEntityListByLotNo(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotEntityListByLotNoCompleted(object state) {
            if ((this.GetStockLotEntityListByLotNoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotEntityListByLotNoCompleted(this, new GetStockLotEntityListByLotNoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotEntityListByLotNoAsync(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, string ErrMsg) {
            this.GetStockLotEntityListByLotNoAsync(checkCode, AccountID, LotID, iStatus, isShowAllDetail, ErrMsg, null);
        }
        
        public void GetStockLotEntityListByLotNoAsync(string checkCode, int AccountID, int[] LotID, int iStatus, bool isShowAllDetail, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotEntityListByLotNoDelegate == null)) {
                this.onBeginGetStockLotEntityListByLotNoDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotEntityListByLotNo);
            }
            if ((this.onEndGetStockLotEntityListByLotNoDelegate == null)) {
                this.onEndGetStockLotEntityListByLotNoDelegate = new EndOperationDelegate(this.OnEndGetStockLotEntityListByLotNo);
            }
            if ((this.onGetStockLotEntityListByLotNoCompletedDelegate == null)) {
                this.onGetStockLotEntityListByLotNoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotEntityListByLotNoCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotEntityListByLotNoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotID,
                        iStatus,
                        isShowAllDetail,
                        ErrMsg}, this.onEndGetStockLotEntityListByLotNoDelegate, this.onGetStockLotEntityListByLotNoCompletedDelegate, userState);
        }
        
        public bool AddStockLot(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, ref int StockLotID, ref string ErrMsg) {
            return base.Channel.AddStockLot(checkCode, AccountID, entity, ref StockLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddStockLot(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, ref int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddStockLot(checkCode, AccountID, entity, ref StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddStockLot(ref int StockLotID, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddStockLot(ref StockLotID, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddStockLot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockLot entity = ((SCG.SINOStock.WCFService.SINOStockService.StockLot)(inValues[2]));
            int StockLotID = ((int)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginAddStockLot(checkCode, AccountID, entity, ref StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddStockLot(System.IAsyncResult result) {
            int StockLotID = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddStockLot(ref StockLotID, ref ErrMsg, result);
            return new object[] {
                    StockLotID,
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddStockLotCompleted(object state) {
            if ((this.AddStockLotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddStockLotCompleted(this, new AddStockLotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddStockLotAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, int StockLotID, string ErrMsg) {
            this.AddStockLotAsync(checkCode, AccountID, entity, StockLotID, ErrMsg, null);
        }
        
        public void AddStockLotAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockLot entity, int StockLotID, string ErrMsg, object userState) {
            if ((this.onBeginAddStockLotDelegate == null)) {
                this.onBeginAddStockLotDelegate = new BeginOperationDelegate(this.OnBeginAddStockLot);
            }
            if ((this.onEndAddStockLotDelegate == null)) {
                this.onEndAddStockLotDelegate = new EndOperationDelegate(this.OnEndAddStockLot);
            }
            if ((this.onAddStockLotCompletedDelegate == null)) {
                this.onAddStockLotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddStockLotCompleted);
            }
            base.InvokeAsync(this.onBeginAddStockLotDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        StockLotID,
                        ErrMsg}, this.onEndAddStockLotDelegate, this.onAddStockLotCompletedDelegate, userState);
        }
        
        public bool EndStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg) {
            return base.Channel.EndStockLot(checkCode, AccountID, StockLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEndStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEndStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEndStockLot(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndEndStockLot(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginEndStockLot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginEndStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndEndStockLot(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndEndStockLot(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnEndStockLotCompleted(object state) {
            if ((this.EndStockLotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndStockLotCompleted(this, new EndStockLotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg) {
            this.EndStockLotAsync(checkCode, AccountID, StockLotID, ErrMsg, null);
        }
        
        public void EndStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg, object userState) {
            if ((this.onBeginEndStockLotDelegate == null)) {
                this.onBeginEndStockLotDelegate = new BeginOperationDelegate(this.OnBeginEndStockLot);
            }
            if ((this.onEndEndStockLotDelegate == null)) {
                this.onEndEndStockLotDelegate = new EndOperationDelegate(this.OnEndEndStockLot);
            }
            if ((this.onEndStockLotCompletedDelegate == null)) {
                this.onEndStockLotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndStockLotCompleted);
            }
            base.InvokeAsync(this.onBeginEndStockLotDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockLotID,
                        ErrMsg}, this.onEndEndStockLotDelegate, this.onEndStockLotCompletedDelegate, userState);
        }
        
        public bool DeleteStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg) {
            return base.Channel.DeleteStockLot(checkCode, AccountID, StockLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteStockLot(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteStockLot(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteStockLot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDeleteStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteStockLot(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteStockLot(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDeleteStockLotCompleted(object state) {
            if ((this.DeleteStockLotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteStockLotCompleted(this, new DeleteStockLotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg) {
            this.DeleteStockLotAsync(checkCode, AccountID, StockLotID, ErrMsg, null);
        }
        
        public void DeleteStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg, object userState) {
            if ((this.onBeginDeleteStockLotDelegate == null)) {
                this.onBeginDeleteStockLotDelegate = new BeginOperationDelegate(this.OnBeginDeleteStockLot);
            }
            if ((this.onEndDeleteStockLotDelegate == null)) {
                this.onEndDeleteStockLotDelegate = new EndOperationDelegate(this.OnEndDeleteStockLot);
            }
            if ((this.onDeleteStockLotCompletedDelegate == null)) {
                this.onDeleteStockLotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteStockLotCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteStockLotDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockLotID,
                        ErrMsg}, this.onEndDeleteStockLotDelegate, this.onDeleteStockLotCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot GetStockLotEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref int OutCount, ref string ErrMsg) {
            return base.Channel.GetStockLotEntityByLotNo_Out(checkCode, AccountID, LotNo, ref OutCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotEntityByLotNo_Out(string checkCode, int AccountID, string LotNo, ref int OutCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotEntityByLotNo_Out(checkCode, AccountID, LotNo, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot EndGetStockLotEntityByLotNo_Out(ref int OutCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotEntityByLotNo_Out(ref OutCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotEntityByLotNo_Out(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            int OutCount = ((int)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginGetStockLotEntityByLotNo_Out(checkCode, AccountID, LotNo, ref OutCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotEntityByLotNo_Out(System.IAsyncResult result) {
            int OutCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot retVal = this.EndGetStockLotEntityByLotNo_Out(ref OutCount, ref ErrMsg, result);
            return new object[] {
                    OutCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotEntityByLotNo_OutCompleted(object state) {
            if ((this.GetStockLotEntityByLotNo_OutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotEntityByLotNo_OutCompleted(this, new GetStockLotEntityByLotNo_OutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotEntityByLotNo_OutAsync(string checkCode, int AccountID, string LotNo, int OutCount, string ErrMsg) {
            this.GetStockLotEntityByLotNo_OutAsync(checkCode, AccountID, LotNo, OutCount, ErrMsg, null);
        }
        
        public void GetStockLotEntityByLotNo_OutAsync(string checkCode, int AccountID, string LotNo, int OutCount, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotEntityByLotNo_OutDelegate == null)) {
                this.onBeginGetStockLotEntityByLotNo_OutDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotEntityByLotNo_Out);
            }
            if ((this.onEndGetStockLotEntityByLotNo_OutDelegate == null)) {
                this.onEndGetStockLotEntityByLotNo_OutDelegate = new EndOperationDelegate(this.OnEndGetStockLotEntityByLotNo_Out);
            }
            if ((this.onGetStockLotEntityByLotNo_OutCompletedDelegate == null)) {
                this.onGetStockLotEntityByLotNo_OutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotEntityByLotNo_OutCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotEntityByLotNo_OutDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        OutCount,
                        ErrMsg}, this.onEndGetStockLotEntityByLotNo_OutDelegate, this.onGetStockLotEntityByLotNo_OutCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg) {
            return base.Channel.GetStockLotList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotList(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, ref int listCount, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotList(ref int listCount, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotList(ref listCount, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            int PageCount = ((int)(inValues[3]));
            int PageIndex = ((int)(inValues[4]));
            int listCount = ((int)(inValues[5]));
            string ErrMsg = ((string)(inValues[6]));
            return this.BeginGetStockLotList(checkCode, AccountID, queryList, PageCount, PageIndex, ref listCount, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotList(System.IAsyncResult result) {
            int listCount = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot[] retVal = this.EndGetStockLotList(ref listCount, ref ErrMsg, result);
            return new object[] {
                    listCount,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotListCompleted(object state) {
            if ((this.GetStockLotListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotListCompleted(this, new GetStockLotListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, int listCount, string ErrMsg) {
            this.GetStockLotListAsync(checkCode, AccountID, queryList, PageCount, PageIndex, listCount, ErrMsg, null);
        }
        
        public void GetStockLotListAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, int PageCount, int PageIndex, int listCount, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotListDelegate == null)) {
                this.onBeginGetStockLotListDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotList);
            }
            if ((this.onEndGetStockLotListDelegate == null)) {
                this.onEndGetStockLotListDelegate = new EndOperationDelegate(this.OnEndGetStockLotList);
            }
            if ((this.onGetStockLotListCompletedDelegate == null)) {
                this.onGetStockLotListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotListCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotListDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        PageCount,
                        PageIndex,
                        listCount,
                        ErrMsg}, this.onEndGetStockLotListDelegate, this.onGetStockLotListCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] GetStockLotList_Two(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg) {
            return base.Channel.GetStockLotList_Two(checkCode, AccountID, queryList, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotList_Two(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotList_Two(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockLot[] EndGetStockLotList_Two(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotList_Two(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotList_Two(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> queryList = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetStockLotList_Two(checkCode, AccountID, queryList, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotList_Two(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockLot[] retVal = this.EndGetStockLotList_Two(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotList_TwoCompleted(object state) {
            if ((this.GetStockLotList_TwoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotList_TwoCompleted(this, new GetStockLotList_TwoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotList_TwoAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg) {
            this.GetStockLotList_TwoAsync(checkCode, AccountID, queryList, ErrMsg, null);
        }
        
        public void GetStockLotList_TwoAsync(string checkCode, int AccountID, System.Collections.Generic.Dictionary<string, string> queryList, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotList_TwoDelegate == null)) {
                this.onBeginGetStockLotList_TwoDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotList_Two);
            }
            if ((this.onEndGetStockLotList_TwoDelegate == null)) {
                this.onEndGetStockLotList_TwoDelegate = new EndOperationDelegate(this.OnEndGetStockLotList_Two);
            }
            if ((this.onGetStockLotList_TwoCompletedDelegate == null)) {
                this.onGetStockLotList_TwoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotList_TwoCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotList_TwoDelegate, new object[] {
                        checkCode,
                        AccountID,
                        queryList,
                        ErrMsg}, this.onEndGetStockLotList_TwoDelegate, this.onGetStockLotList_TwoCompletedDelegate, userState);
        }
        
        public bool HOLDAllToNewStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg) {
            return base.Channel.HOLDAllToNewStockLot(checkCode, AccountID, StockLotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHOLDAllToNewStockLot(string checkCode, int AccountID, int StockLotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHOLDAllToNewStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndHOLDAllToNewStockLot(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndHOLDAllToNewStockLot(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginHOLDAllToNewStockLot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginHOLDAllToNewStockLot(checkCode, AccountID, StockLotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndHOLDAllToNewStockLot(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndHOLDAllToNewStockLot(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnHOLDAllToNewStockLotCompleted(object state) {
            if ((this.HOLDAllToNewStockLotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HOLDAllToNewStockLotCompleted(this, new HOLDAllToNewStockLotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HOLDAllToNewStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg) {
            this.HOLDAllToNewStockLotAsync(checkCode, AccountID, StockLotID, ErrMsg, null);
        }
        
        public void HOLDAllToNewStockLotAsync(string checkCode, int AccountID, int StockLotID, string ErrMsg, object userState) {
            if ((this.onBeginHOLDAllToNewStockLotDelegate == null)) {
                this.onBeginHOLDAllToNewStockLotDelegate = new BeginOperationDelegate(this.OnBeginHOLDAllToNewStockLot);
            }
            if ((this.onEndHOLDAllToNewStockLotDelegate == null)) {
                this.onEndHOLDAllToNewStockLotDelegate = new EndOperationDelegate(this.OnEndHOLDAllToNewStockLot);
            }
            if ((this.onHOLDAllToNewStockLotCompletedDelegate == null)) {
                this.onHOLDAllToNewStockLotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHOLDAllToNewStockLotCompleted);
            }
            base.InvokeAsync(this.onBeginHOLDAllToNewStockLotDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StockLotID,
                        ErrMsg}, this.onEndHOLDAllToNewStockLotDelegate, this.onHOLDAllToNewStockLotCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] GetStockOutQtys(int[] StockLotIDs) {
            return base.Channel.GetStockOutQtys(StockLotIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockOutQtys(int[] StockLotIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockOutQtys(StockLotIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] EndGetStockOutQtys(System.IAsyncResult result) {
            return base.Channel.EndGetStockOutQtys(result);
        }
        
        private System.IAsyncResult OnBeginGetStockOutQtys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int[] StockLotIDs = ((int[])(inValues[0]));
            return this.BeginGetStockOutQtys(StockLotIDs, callback, asyncState);
        }
        
        private object[] OnEndGetStockOutQtys(System.IAsyncResult result) {
            SCG.SINOStock.WCFService.SINOStockService.StockOutQtyHelper[] retVal = this.EndGetStockOutQtys(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStockOutQtysCompleted(object state) {
            if ((this.GetStockOutQtysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockOutQtysCompleted(this, new GetStockOutQtysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockOutQtysAsync(int[] StockLotIDs) {
            this.GetStockOutQtysAsync(StockLotIDs, null);
        }
        
        public void GetStockOutQtysAsync(int[] StockLotIDs, object userState) {
            if ((this.onBeginGetStockOutQtysDelegate == null)) {
                this.onBeginGetStockOutQtysDelegate = new BeginOperationDelegate(this.OnBeginGetStockOutQtys);
            }
            if ((this.onEndGetStockOutQtysDelegate == null)) {
                this.onEndGetStockOutQtysDelegate = new EndOperationDelegate(this.OnEndGetStockOutQtys);
            }
            if ((this.onGetStockOutQtysCompletedDelegate == null)) {
                this.onGetStockOutQtysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockOutQtysCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockOutQtysDelegate, new object[] {
                        StockLotIDs}, this.onEndGetStockOutQtysDelegate, this.onGetStockOutQtysCompletedDelegate, userState);
        }
        
        public bool GetStockLotEntityByLotNoTotal(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg) {
            return base.Channel.GetStockLotEntityByLotNoTotal(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockLotEntityByLotNoTotal(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockLotEntityByLotNoTotal(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetStockLotEntityByLotNoTotal(ref int Qty, ref int OperaterQty, ref int FanGongQty, ref int HOLDQty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockLotEntityByLotNoTotal(ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockLotEntityByLotNoTotal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string LotNo = ((string)(inValues[2]));
            int iStatus = ((int)(inValues[3]));
            bool isShowAllDetail = ((bool)(inValues[4]));
            int Qty = ((int)(inValues[5]));
            int OperaterQty = ((int)(inValues[6]));
            int FanGongQty = ((int)(inValues[7]));
            int HOLDQty = ((int)(inValues[8]));
            string ErrMsg = ((string)(inValues[9]));
            return this.BeginGetStockLotEntityByLotNoTotal(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockLotEntityByLotNoTotal(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            int OperaterQty = this.GetDefaultValueForInitialization<int>();
            int FanGongQty = this.GetDefaultValueForInitialization<int>();
            int HOLDQty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndGetStockLotEntityByLotNoTotal(ref Qty, ref OperaterQty, ref FanGongQty, ref HOLDQty, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    OperaterQty,
                    FanGongQty,
                    HOLDQty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockLotEntityByLotNoTotalCompleted(object state) {
            if ((this.GetStockLotEntityByLotNoTotalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockLotEntityByLotNoTotalCompleted(this, new GetStockLotEntityByLotNoTotalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockLotEntityByLotNoTotalAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int OperaterQty, int FanGongQty, int HOLDQty, string ErrMsg) {
            this.GetStockLotEntityByLotNoTotalAsync(checkCode, AccountID, LotNo, iStatus, isShowAllDetail, Qty, OperaterQty, FanGongQty, HOLDQty, ErrMsg, null);
        }
        
        public void GetStockLotEntityByLotNoTotalAsync(string checkCode, int AccountID, string LotNo, int iStatus, bool isShowAllDetail, int Qty, int OperaterQty, int FanGongQty, int HOLDQty, string ErrMsg, object userState) {
            if ((this.onBeginGetStockLotEntityByLotNoTotalDelegate == null)) {
                this.onBeginGetStockLotEntityByLotNoTotalDelegate = new BeginOperationDelegate(this.OnBeginGetStockLotEntityByLotNoTotal);
            }
            if ((this.onEndGetStockLotEntityByLotNoTotalDelegate == null)) {
                this.onEndGetStockLotEntityByLotNoTotalDelegate = new EndOperationDelegate(this.OnEndGetStockLotEntityByLotNoTotal);
            }
            if ((this.onGetStockLotEntityByLotNoTotalCompletedDelegate == null)) {
                this.onGetStockLotEntityByLotNoTotalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockLotEntityByLotNoTotalCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockLotEntityByLotNoTotalDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotNo,
                        iStatus,
                        isShowAllDetail,
                        Qty,
                        OperaterQty,
                        FanGongQty,
                        HOLDQty,
                        ErrMsg}, this.onEndGetStockLotEntityByLotNoTotalDelegate, this.onGetStockLotEntityByLotNoTotalCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] GetStockOutDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg) {
            return base.Channel.GetStockOutDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockOutDetailList(string checkCode, int cAccountID, int StockLotID, int AccountID, ref int CountQty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockOutDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] EndGetStockOutDetailList(ref int CountQty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockOutDetailList(ref CountQty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockOutDetailList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int cAccountID = ((int)(inValues[1]));
            int StockLotID = ((int)(inValues[2]));
            int AccountID = ((int)(inValues[3]));
            int CountQty = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginGetStockOutDetailList(checkCode, cAccountID, StockLotID, AccountID, ref CountQty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockOutDetailList(System.IAsyncResult result) {
            int CountQty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail[] retVal = this.EndGetStockOutDetailList(ref CountQty, ref ErrMsg, result);
            return new object[] {
                    CountQty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockOutDetailListCompleted(object state) {
            if ((this.GetStockOutDetailListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockOutDetailListCompleted(this, new GetStockOutDetailListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockOutDetailListAsync(string checkCode, int cAccountID, int StockLotID, int AccountID, int CountQty, string ErrMsg) {
            this.GetStockOutDetailListAsync(checkCode, cAccountID, StockLotID, AccountID, CountQty, ErrMsg, null);
        }
        
        public void GetStockOutDetailListAsync(string checkCode, int cAccountID, int StockLotID, int AccountID, int CountQty, string ErrMsg, object userState) {
            if ((this.onBeginGetStockOutDetailListDelegate == null)) {
                this.onBeginGetStockOutDetailListDelegate = new BeginOperationDelegate(this.OnBeginGetStockOutDetailList);
            }
            if ((this.onEndGetStockOutDetailListDelegate == null)) {
                this.onEndGetStockOutDetailListDelegate = new EndOperationDelegate(this.OnEndGetStockOutDetailList);
            }
            if ((this.onGetStockOutDetailListCompletedDelegate == null)) {
                this.onGetStockOutDetailListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockOutDetailListCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockOutDetailListDelegate, new object[] {
                        checkCode,
                        cAccountID,
                        StockLotID,
                        AccountID,
                        CountQty,
                        ErrMsg}, this.onEndGetStockOutDetailListDelegate, this.onGetStockOutDetailListCompletedDelegate, userState);
        }
        
        public bool AddStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg) {
            return base.Channel.AddStockOutDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref entityID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddStockOutDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref entityID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddStockOutDetail(ref int QtyCount, ref SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddStockOutDetail(ref QtyCount, ref entityID, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddStockOutDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(inValues[2]));
            bool IsCheck = ((bool)(inValues[3]));
            int QtyCount = ((int)(inValues[4]));
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID = ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(inValues[5]));
            string ErrMsg = ((string)(inValues[6]));
            return this.BeginAddStockOutDetail(checkCode, AccountID, entity, IsCheck, ref QtyCount, ref entityID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddStockOutDetail(System.IAsyncResult result) {
            int QtyCount = this.GetDefaultValueForInitialization<int>();
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID = this.GetDefaultValueForInitialization<SCG.SINOStock.WCFService.SINOStockService.StockOutDetail>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddStockOutDetail(ref QtyCount, ref entityID, ref ErrMsg, result);
            return new object[] {
                    QtyCount,
                    entityID,
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddStockOutDetailCompleted(object state) {
            if ((this.AddStockOutDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddStockOutDetailCompleted(this, new AddStockOutDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, int QtyCount, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, string ErrMsg) {
            this.AddStockOutDetailAsync(checkCode, AccountID, entity, IsCheck, QtyCount, entityID, ErrMsg, null);
        }
        
        public void AddStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, bool IsCheck, int QtyCount, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entityID, string ErrMsg, object userState) {
            if ((this.onBeginAddStockOutDetailDelegate == null)) {
                this.onBeginAddStockOutDetailDelegate = new BeginOperationDelegate(this.OnBeginAddStockOutDetail);
            }
            if ((this.onEndAddStockOutDetailDelegate == null)) {
                this.onEndAddStockOutDetailDelegate = new EndOperationDelegate(this.OnEndAddStockOutDetail);
            }
            if ((this.onAddStockOutDetailCompletedDelegate == null)) {
                this.onAddStockOutDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddStockOutDetailCompleted);
            }
            base.InvokeAsync(this.onBeginAddStockOutDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        IsCheck,
                        QtyCount,
                        entityID,
                        ErrMsg}, this.onEndAddStockOutDetailDelegate, this.onAddStockOutDetailCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail GetStockoutDetailByGlassID(string checkCode, int AccountID, string strGlassID, ref string ErrMsg) {
            return base.Channel.GetStockoutDetailByGlassID(checkCode, AccountID, strGlassID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStockoutDetailByGlassID(string checkCode, int AccountID, string strGlassID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockoutDetailByGlassID(checkCode, AccountID, strGlassID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockOutDetail EndGetStockoutDetailByGlassID(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetStockoutDetailByGlassID(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetStockoutDetailByGlassID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string strGlassID = ((string)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetStockoutDetailByGlassID(checkCode, AccountID, strGlassID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetStockoutDetailByGlassID(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail retVal = this.EndGetStockoutDetailByGlassID(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetStockoutDetailByGlassIDCompleted(object state) {
            if ((this.GetStockoutDetailByGlassIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockoutDetailByGlassIDCompleted(this, new GetStockoutDetailByGlassIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockoutDetailByGlassIDAsync(string checkCode, int AccountID, string strGlassID, string ErrMsg) {
            this.GetStockoutDetailByGlassIDAsync(checkCode, AccountID, strGlassID, ErrMsg, null);
        }
        
        public void GetStockoutDetailByGlassIDAsync(string checkCode, int AccountID, string strGlassID, string ErrMsg, object userState) {
            if ((this.onBeginGetStockoutDetailByGlassIDDelegate == null)) {
                this.onBeginGetStockoutDetailByGlassIDDelegate = new BeginOperationDelegate(this.OnBeginGetStockoutDetailByGlassID);
            }
            if ((this.onEndGetStockoutDetailByGlassIDDelegate == null)) {
                this.onEndGetStockoutDetailByGlassIDDelegate = new EndOperationDelegate(this.OnEndGetStockoutDetailByGlassID);
            }
            if ((this.onGetStockoutDetailByGlassIDCompletedDelegate == null)) {
                this.onGetStockoutDetailByGlassIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockoutDetailByGlassIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockoutDetailByGlassIDDelegate, new object[] {
                        checkCode,
                        AccountID,
                        strGlassID,
                        ErrMsg}, this.onEndGetStockoutDetailByGlassIDDelegate, this.onGetStockoutDetailByGlassIDCompletedDelegate, userState);
        }
        
        public bool ModifyStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg) {
            return base.Channel.ModifyStockOutDetail(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyStockOutDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyStockOutDetail(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyStockOutDetail(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyStockOutDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginModifyStockOutDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyStockOutDetail(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyStockOutDetail(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyStockOutDetailCompleted(object state) {
            if ((this.ModifyStockOutDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyStockOutDetailCompleted(this, new ModifyStockOutDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, string ErrMsg) {
            this.ModifyStockOutDetailAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void ModifyStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, string ErrMsg, object userState) {
            if ((this.onBeginModifyStockOutDetailDelegate == null)) {
                this.onBeginModifyStockOutDetailDelegate = new BeginOperationDelegate(this.OnBeginModifyStockOutDetail);
            }
            if ((this.onEndModifyStockOutDetailDelegate == null)) {
                this.onEndModifyStockOutDetailDelegate = new EndOperationDelegate(this.OnEndModifyStockOutDetail);
            }
            if ((this.onModifyStockOutDetailCompletedDelegate == null)) {
                this.onModifyStockOutDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyStockOutDetailCompleted);
            }
            base.InvokeAsync(this.onBeginModifyStockOutDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndModifyStockOutDetailDelegate, this.onModifyStockOutDetailCompletedDelegate, userState);
        }
        
        public bool DeleteStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg) {
            return base.Channel.DeleteStockOutDetail(checkCode, AccountID, entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteStockOutDetail(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteStockOutDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteStockOutDetail(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteStockOutDetail(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteStockOutDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity = ((SCG.SINOStock.WCFService.SINOStockService.StockOutDetail)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginDeleteStockOutDetail(checkCode, AccountID, entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteStockOutDetail(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteStockOutDetail(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnDeleteStockOutDetailCompleted(object state) {
            if ((this.DeleteStockOutDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteStockOutDetailCompleted(this, new DeleteStockOutDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, string ErrMsg) {
            this.DeleteStockOutDetailAsync(checkCode, AccountID, entity, ErrMsg, null);
        }
        
        public void DeleteStockOutDetailAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.StockOutDetail entity, string ErrMsg, object userState) {
            if ((this.onBeginDeleteStockOutDetailDelegate == null)) {
                this.onBeginDeleteStockOutDetailDelegate = new BeginOperationDelegate(this.OnBeginDeleteStockOutDetail);
            }
            if ((this.onEndDeleteStockOutDetailDelegate == null)) {
                this.onEndDeleteStockOutDetailDelegate = new EndOperationDelegate(this.OnEndDeleteStockOutDetail);
            }
            if ((this.onDeleteStockOutDetailCompletedDelegate == null)) {
                this.onDeleteStockOutDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteStockOutDetailCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteStockOutDetailDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        ErrMsg}, this.onEndDeleteStockOutDetailDelegate, this.onDeleteStockOutDetailCompletedDelegate, userState);
        }
        
        public bool AddStockProDic(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, ref string ErrMsg) {
            return base.Channel.AddStockProDic(entity, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddStockProDic(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddStockProDic(entity, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddStockProDic(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddStockProDic(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddStockProDic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SCG.SINOStock.WCFService.SINOStockService.StockProDic entity = ((SCG.SINOStock.WCFService.SINOStockService.StockProDic)(inValues[0]));
            string ErrMsg = ((string)(inValues[1]));
            return this.BeginAddStockProDic(entity, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddStockProDic(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddStockProDic(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddStockProDicCompleted(object state) {
            if ((this.AddStockProDicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddStockProDicCompleted(this, new AddStockProDicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddStockProDicAsync(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, string ErrMsg) {
            this.AddStockProDicAsync(entity, ErrMsg, null);
        }
        
        public void AddStockProDicAsync(SCG.SINOStock.WCFService.SINOStockService.StockProDic entity, string ErrMsg, object userState) {
            if ((this.onBeginAddStockProDicDelegate == null)) {
                this.onBeginAddStockProDicDelegate = new BeginOperationDelegate(this.OnBeginAddStockProDic);
            }
            if ((this.onEndAddStockProDicDelegate == null)) {
                this.onEndAddStockProDicDelegate = new EndOperationDelegate(this.OnEndAddStockProDic);
            }
            if ((this.onAddStockProDicCompletedDelegate == null)) {
                this.onAddStockProDicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddStockProDicCompleted);
            }
            base.InvokeAsync(this.onBeginAddStockProDicDelegate, new object[] {
                        entity,
                        ErrMsg}, this.onEndAddStockProDicDelegate, this.onAddStockProDicCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.StockProDic GetProDicByProAndLotID(int LotID, string ProModel) {
            return base.Channel.GetProDicByProAndLotID(LotID, ProModel);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProDicByProAndLotID(int LotID, string ProModel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProDicByProAndLotID(LotID, ProModel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.StockProDic EndGetProDicByProAndLotID(System.IAsyncResult result) {
            return base.Channel.EndGetProDicByProAndLotID(result);
        }
        
        private System.IAsyncResult OnBeginGetProDicByProAndLotID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int LotID = ((int)(inValues[0]));
            string ProModel = ((string)(inValues[1]));
            return this.BeginGetProDicByProAndLotID(LotID, ProModel, callback, asyncState);
        }
        
        private object[] OnEndGetProDicByProAndLotID(System.IAsyncResult result) {
            SCG.SINOStock.WCFService.SINOStockService.StockProDic retVal = this.EndGetProDicByProAndLotID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProDicByProAndLotIDCompleted(object state) {
            if ((this.GetProDicByProAndLotIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProDicByProAndLotIDCompleted(this, new GetProDicByProAndLotIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProDicByProAndLotIDAsync(int LotID, string ProModel) {
            this.GetProDicByProAndLotIDAsync(LotID, ProModel, null);
        }
        
        public void GetProDicByProAndLotIDAsync(int LotID, string ProModel, object userState) {
            if ((this.onBeginGetProDicByProAndLotIDDelegate == null)) {
                this.onBeginGetProDicByProAndLotIDDelegate = new BeginOperationDelegate(this.OnBeginGetProDicByProAndLotID);
            }
            if ((this.onEndGetProDicByProAndLotIDDelegate == null)) {
                this.onEndGetProDicByProAndLotIDDelegate = new EndOperationDelegate(this.OnEndGetProDicByProAndLotID);
            }
            if ((this.onGetProDicByProAndLotIDCompletedDelegate == null)) {
                this.onGetProDicByProAndLotIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProDicByProAndLotIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetProDicByProAndLotIDDelegate, new object[] {
                        LotID,
                        ProModel}, this.onEndGetProDicByProAndLotIDDelegate, this.onGetProDicByProAndLotIDCompletedDelegate, userState);
        }
        
        public bool AddTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, ref int Qty, ref string[] Boxs, ref string ErrMsg) {
            return base.Channel.AddTray(checkCode, AccountID, entity, StockLotIDs, isQiangDa, ref Qty, ref Boxs, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, ref int Qty, ref string[] Boxs, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTray(checkCode, AccountID, entity, StockLotIDs, isQiangDa, ref Qty, ref Boxs, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddTray(ref int Qty, ref string[] Boxs, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndAddTray(ref Qty, ref Boxs, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddTray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Tray entity = ((SCG.SINOStock.WCFService.SINOStockService.Tray)(inValues[2]));
            int[] StockLotIDs = ((int[])(inValues[3]));
            bool isQiangDa = ((bool)(inValues[4]));
            int Qty = ((int)(inValues[5]));
            string[] Boxs = ((string[])(inValues[6]));
            string ErrMsg = ((string)(inValues[7]));
            return this.BeginAddTray(checkCode, AccountID, entity, StockLotIDs, isQiangDa, ref Qty, ref Boxs, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndAddTray(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            string[] Boxs = this.GetDefaultValueForInitialization<string[]>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddTray(ref Qty, ref Boxs, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    Boxs,
                    ErrMsg,
                    retVal};
        }
        
        private void OnAddTrayCompleted(object state) {
            if ((this.AddTrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTrayCompleted(this, new AddTrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTrayAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, int Qty, string[] Boxs, string ErrMsg) {
            this.AddTrayAsync(checkCode, AccountID, entity, StockLotIDs, isQiangDa, Qty, Boxs, ErrMsg, null);
        }
        
        public void AddTrayAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int[] StockLotIDs, bool isQiangDa, int Qty, string[] Boxs, string ErrMsg, object userState) {
            if ((this.onBeginAddTrayDelegate == null)) {
                this.onBeginAddTrayDelegate = new BeginOperationDelegate(this.OnBeginAddTray);
            }
            if ((this.onEndAddTrayDelegate == null)) {
                this.onEndAddTrayDelegate = new EndOperationDelegate(this.OnEndAddTray);
            }
            if ((this.onAddTrayCompletedDelegate == null)) {
                this.onAddTrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTrayCompleted);
            }
            base.InvokeAsync(this.onBeginAddTrayDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        StockLotIDs,
                        isQiangDa,
                        Qty,
                        Boxs,
                        ErrMsg}, this.onEndAddTrayDelegate, this.onAddTrayCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray GetTrayByBarCode(string checkCode, int AccountID, string BarCode, ref int Qty, ref string ProModel, ref string ErrMsg) {
            return base.Channel.GetTrayByBarCode(checkCode, AccountID, BarCode, ref Qty, ref ProModel, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrayByBarCode(string checkCode, int AccountID, string BarCode, ref int Qty, ref string ProModel, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrayByBarCode(checkCode, AccountID, BarCode, ref Qty, ref ProModel, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Tray EndGetTrayByBarCode(ref int Qty, ref string ProModel, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetTrayByBarCode(ref Qty, ref ProModel, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetTrayByBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            string BarCode = ((string)(inValues[2]));
            int Qty = ((int)(inValues[3]));
            string ProModel = ((string)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginGetTrayByBarCode(checkCode, AccountID, BarCode, ref Qty, ref ProModel, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetTrayByBarCode(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            string ProModel = this.GetDefaultValueForInitialization<string>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Tray retVal = this.EndGetTrayByBarCode(ref Qty, ref ProModel, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    ProModel,
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetTrayByBarCodeCompleted(object state) {
            if ((this.GetTrayByBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrayByBarCodeCompleted(this, new GetTrayByBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrayByBarCodeAsync(string checkCode, int AccountID, string BarCode, int Qty, string ProModel, string ErrMsg) {
            this.GetTrayByBarCodeAsync(checkCode, AccountID, BarCode, Qty, ProModel, ErrMsg, null);
        }
        
        public void GetTrayByBarCodeAsync(string checkCode, int AccountID, string BarCode, int Qty, string ProModel, string ErrMsg, object userState) {
            if ((this.onBeginGetTrayByBarCodeDelegate == null)) {
                this.onBeginGetTrayByBarCodeDelegate = new BeginOperationDelegate(this.OnBeginGetTrayByBarCode);
            }
            if ((this.onEndGetTrayByBarCodeDelegate == null)) {
                this.onEndGetTrayByBarCodeDelegate = new EndOperationDelegate(this.OnEndGetTrayByBarCode);
            }
            if ((this.onGetTrayByBarCodeCompletedDelegate == null)) {
                this.onGetTrayByBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrayByBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrayByBarCodeDelegate, new object[] {
                        checkCode,
                        AccountID,
                        BarCode,
                        Qty,
                        ProModel,
                        ErrMsg}, this.onEndGetTrayByBarCodeDelegate, this.onGetTrayByBarCodeCompletedDelegate, userState);
        }
        
        public string GetTrayMaxBarCode(string checkCode, int AccountID, int LogID, ref string ErrMsg) {
            return base.Channel.GetTrayMaxBarCode(checkCode, AccountID, LogID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrayMaxBarCode(string checkCode, int AccountID, int LogID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrayMaxBarCode(checkCode, AccountID, LogID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTrayMaxBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetTrayMaxBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetTrayMaxBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int LogID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetTrayMaxBarCode(checkCode, AccountID, LogID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetTrayMaxBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetTrayMaxBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetTrayMaxBarCodeCompleted(object state) {
            if ((this.GetTrayMaxBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrayMaxBarCodeCompleted(this, new GetTrayMaxBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrayMaxBarCodeAsync(string checkCode, int AccountID, int LogID, string ErrMsg) {
            this.GetTrayMaxBarCodeAsync(checkCode, AccountID, LogID, ErrMsg, null);
        }
        
        public void GetTrayMaxBarCodeAsync(string checkCode, int AccountID, int LogID, string ErrMsg, object userState) {
            if ((this.onBeginGetTrayMaxBarCodeDelegate == null)) {
                this.onBeginGetTrayMaxBarCodeDelegate = new BeginOperationDelegate(this.OnBeginGetTrayMaxBarCode);
            }
            if ((this.onEndGetTrayMaxBarCodeDelegate == null)) {
                this.onEndGetTrayMaxBarCodeDelegate = new EndOperationDelegate(this.OnEndGetTrayMaxBarCode);
            }
            if ((this.onGetTrayMaxBarCodeCompletedDelegate == null)) {
                this.onGetTrayMaxBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrayMaxBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrayMaxBarCodeDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LogID,
                        ErrMsg}, this.onEndGetTrayMaxBarCodeDelegate, this.onGetTrayMaxBarCodeCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray[] GetTrayListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg) {
            return base.Channel.GetTrayListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrayListByDt(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrayListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Tray[] EndGetTrayListByDt(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetTrayListByDt(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetTrayListByDt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            System.DateTime StartDt = ((System.DateTime)(inValues[2]));
            System.DateTime EndDt = ((System.DateTime)(inValues[3]));
            string ErrMsg = ((string)(inValues[4]));
            return this.BeginGetTrayListByDt(checkCode, AccountID, StartDt, EndDt, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetTrayListByDt(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Tray[] retVal = this.EndGetTrayListByDt(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetTrayListByDtCompleted(object state) {
            if ((this.GetTrayListByDtCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrayListByDtCompleted(this, new GetTrayListByDtCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrayListByDtAsync(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, string ErrMsg) {
            this.GetTrayListByDtAsync(checkCode, AccountID, StartDt, EndDt, ErrMsg, null);
        }
        
        public void GetTrayListByDtAsync(string checkCode, int AccountID, System.DateTime StartDt, System.DateTime EndDt, string ErrMsg, object userState) {
            if ((this.onBeginGetTrayListByDtDelegate == null)) {
                this.onBeginGetTrayListByDtDelegate = new BeginOperationDelegate(this.OnBeginGetTrayListByDt);
            }
            if ((this.onEndGetTrayListByDtDelegate == null)) {
                this.onEndGetTrayListByDtDelegate = new EndOperationDelegate(this.OnEndGetTrayListByDt);
            }
            if ((this.onGetTrayListByDtCompletedDelegate == null)) {
                this.onGetTrayListByDtCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrayListByDtCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrayListByDtDelegate, new object[] {
                        checkCode,
                        AccountID,
                        StartDt,
                        EndDt,
                        ErrMsg}, this.onEndGetTrayListByDtDelegate, this.onGetTrayListByDtCompletedDelegate, userState);
        }
        
        public SCG.SINOStock.WCFService.SINOStockService.Tray GetMaxTray(string checkCode, int AccountID, int LotID, ref string ErrMsg) {
            return base.Channel.GetMaxTray(checkCode, AccountID, LotID, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxTray(string checkCode, int AccountID, int LotID, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxTray(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SCG.SINOStock.WCFService.SINOStockService.Tray EndGetMaxTray(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndGetMaxTray(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginGetMaxTray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            int LotID = ((int)(inValues[2]));
            string ErrMsg = ((string)(inValues[3]));
            return this.BeginGetMaxTray(checkCode, AccountID, LotID, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndGetMaxTray(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            SCG.SINOStock.WCFService.SINOStockService.Tray retVal = this.EndGetMaxTray(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnGetMaxTrayCompleted(object state) {
            if ((this.GetMaxTrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxTrayCompleted(this, new GetMaxTrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxTrayAsync(string checkCode, int AccountID, int LotID, string ErrMsg) {
            this.GetMaxTrayAsync(checkCode, AccountID, LotID, ErrMsg, null);
        }
        
        public void GetMaxTrayAsync(string checkCode, int AccountID, int LotID, string ErrMsg, object userState) {
            if ((this.onBeginGetMaxTrayDelegate == null)) {
                this.onBeginGetMaxTrayDelegate = new BeginOperationDelegate(this.OnBeginGetMaxTray);
            }
            if ((this.onEndGetMaxTrayDelegate == null)) {
                this.onEndGetMaxTrayDelegate = new EndOperationDelegate(this.OnEndGetMaxTray);
            }
            if ((this.onGetMaxTrayCompletedDelegate == null)) {
                this.onGetMaxTrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxTrayCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxTrayDelegate, new object[] {
                        checkCode,
                        AccountID,
                        LotID,
                        ErrMsg}, this.onEndGetMaxTrayDelegate, this.onGetMaxTrayCompletedDelegate, userState);
        }
        
        public bool ModifyTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, ref int Qty, ref string ErrMsg) {
            return base.Channel.ModifyTray(checkCode, AccountID, entity, StockLotID, ref Qty, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyTray(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, ref int Qty, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyTray(checkCode, AccountID, entity, StockLotID, ref Qty, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndModifyTray(ref int Qty, ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndModifyTray(ref Qty, ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginModifyTray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string checkCode = ((string)(inValues[0]));
            int AccountID = ((int)(inValues[1]));
            SCG.SINOStock.WCFService.SINOStockService.Tray entity = ((SCG.SINOStock.WCFService.SINOStockService.Tray)(inValues[2]));
            int StockLotID = ((int)(inValues[3]));
            int Qty = ((int)(inValues[4]));
            string ErrMsg = ((string)(inValues[5]));
            return this.BeginModifyTray(checkCode, AccountID, entity, StockLotID, ref Qty, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndModifyTray(System.IAsyncResult result) {
            int Qty = this.GetDefaultValueForInitialization<int>();
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndModifyTray(ref Qty, ref ErrMsg, result);
            return new object[] {
                    Qty,
                    ErrMsg,
                    retVal};
        }
        
        private void OnModifyTrayCompleted(object state) {
            if ((this.ModifyTrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyTrayCompleted(this, new ModifyTrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyTrayAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, int Qty, string ErrMsg) {
            this.ModifyTrayAsync(checkCode, AccountID, entity, StockLotID, Qty, ErrMsg, null);
        }
        
        public void ModifyTrayAsync(string checkCode, int AccountID, SCG.SINOStock.WCFService.SINOStockService.Tray entity, int StockLotID, int Qty, string ErrMsg, object userState) {
            if ((this.onBeginModifyTrayDelegate == null)) {
                this.onBeginModifyTrayDelegate = new BeginOperationDelegate(this.OnBeginModifyTray);
            }
            if ((this.onEndModifyTrayDelegate == null)) {
                this.onEndModifyTrayDelegate = new EndOperationDelegate(this.OnEndModifyTray);
            }
            if ((this.onModifyTrayCompletedDelegate == null)) {
                this.onModifyTrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyTrayCompleted);
            }
            base.InvokeAsync(this.onBeginModifyTrayDelegate, new object[] {
                        checkCode,
                        AccountID,
                        entity,
                        StockLotID,
                        Qty,
                        ErrMsg}, this.onEndModifyTrayDelegate, this.onModifyTrayCompletedDelegate, userState);
        }
        
        public bool ChangeTryBarCode(string strBarCode, ref string ErrMsg) {
            return base.Channel.ChangeTryBarCode(strBarCode, ref ErrMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeTryBarCode(string strBarCode, ref string ErrMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeTryBarCode(strBarCode, ref ErrMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangeTryBarCode(ref string ErrMsg, System.IAsyncResult result) {
            return base.Channel.EndChangeTryBarCode(ref ErrMsg, result);
        }
        
        private System.IAsyncResult OnBeginChangeTryBarCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strBarCode = ((string)(inValues[0]));
            string ErrMsg = ((string)(inValues[1]));
            return this.BeginChangeTryBarCode(strBarCode, ref ErrMsg, callback, asyncState);
        }
        
        private object[] OnEndChangeTryBarCode(System.IAsyncResult result) {
            string ErrMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangeTryBarCode(ref ErrMsg, result);
            return new object[] {
                    ErrMsg,
                    retVal};
        }
        
        private void OnChangeTryBarCodeCompleted(object state) {
            if ((this.ChangeTryBarCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeTryBarCodeCompleted(this, new ChangeTryBarCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeTryBarCodeAsync(string strBarCode, string ErrMsg) {
            this.ChangeTryBarCodeAsync(strBarCode, ErrMsg, null);
        }
        
        public void ChangeTryBarCodeAsync(string strBarCode, string ErrMsg, object userState) {
            if ((this.onBeginChangeTryBarCodeDelegate == null)) {
                this.onBeginChangeTryBarCodeDelegate = new BeginOperationDelegate(this.OnBeginChangeTryBarCode);
            }
            if ((this.onEndChangeTryBarCodeDelegate == null)) {
                this.onEndChangeTryBarCodeDelegate = new EndOperationDelegate(this.OnEndChangeTryBarCode);
            }
            if ((this.onChangeTryBarCodeCompletedDelegate == null)) {
                this.onChangeTryBarCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeTryBarCodeCompleted);
            }
            base.InvokeAsync(this.onBeginChangeTryBarCodeDelegate, new object[] {
                        strBarCode,
                        ErrMsg}, this.onEndChangeTryBarCodeDelegate, this.onChangeTryBarCodeCompletedDelegate, userState);
        }
    }
}
